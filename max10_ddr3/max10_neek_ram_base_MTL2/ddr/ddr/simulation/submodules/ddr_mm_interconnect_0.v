// ddr_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 196

`timescale 1 ps / 1 ps
module ddr_mm_interconnect_0 (
		input  wire        mem_if_ddr3_emif_0_afi_clk_clk,                                      //                                    mem_if_ddr3_emif_0_afi_clk.clk
		input  wire        master_0_clk_reset_reset_bridge_in_reset_reset,                      //                      master_0_clk_reset_reset_bridge_in_reset.reset
		input  wire        master_0_master_translator_reset_reset_bridge_in_reset_reset,        //        master_0_master_translator_reset_reset_bridge_in_reset.reset
		input  wire        mem_if_ddr3_emif_0_avl_translator_reset_reset_bridge_in_reset_reset, // mem_if_ddr3_emif_0_avl_translator_reset_reset_bridge_in_reset.reset
		input  wire        mem_if_ddr3_emif_0_soft_reset_reset_bridge_in_reset_reset,           //           mem_if_ddr3_emif_0_soft_reset_reset_bridge_in_reset.reset
		input  wire        mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset,               //               mm_master_bfm_0_clk_reset_reset_bridge_in_reset.reset
		input  wire        pio_0_reset_reset_bridge_in_reset_reset,                             //                             pio_0_reset_reset_bridge_in_reset.reset
		input  wire        sysid_qsys_0_reset_reset_bridge_in_reset_reset,                      //                      sysid_qsys_0_reset_reset_bridge_in_reset.reset
		input  wire [27:0] dma_0_read_master_address,                                           //                                             dma_0_read_master.address
		output wire        dma_0_read_master_waitrequest,                                       //                                                              .waitrequest
		input  wire [7:0]  dma_0_read_master_burstcount,                                        //                                                              .burstcount
		input  wire        dma_0_read_master_chipselect,                                        //                                                              .chipselect
		input  wire        dma_0_read_master_read,                                              //                                                              .read
		output wire [63:0] dma_0_read_master_readdata,                                          //                                                              .readdata
		output wire        dma_0_read_master_readdatavalid,                                     //                                                              .readdatavalid
		input  wire [26:0] dma_0_write_master_address,                                          //                                            dma_0_write_master.address
		output wire        dma_0_write_master_waitrequest,                                      //                                                              .waitrequest
		input  wire [7:0]  dma_0_write_master_burstcount,                                       //                                                              .burstcount
		input  wire [7:0]  dma_0_write_master_byteenable,                                       //                                                              .byteenable
		input  wire        dma_0_write_master_chipselect,                                       //                                                              .chipselect
		input  wire        dma_0_write_master_write,                                            //                                                              .write
		input  wire [63:0] dma_0_write_master_writedata,                                        //                                                              .writedata
		input  wire [31:0] master_0_master_address,                                             //                                               master_0_master.address
		output wire        master_0_master_waitrequest,                                         //                                                              .waitrequest
		input  wire [3:0]  master_0_master_byteenable,                                          //                                                              .byteenable
		input  wire        master_0_master_read,                                                //                                                              .read
		output wire [31:0] master_0_master_readdata,                                            //                                                              .readdata
		output wire        master_0_master_readdatavalid,                                       //                                                              .readdatavalid
		input  wire        master_0_master_write,                                               //                                                              .write
		input  wire [31:0] master_0_master_writedata,                                           //                                                              .writedata
		input  wire [29:0] mm_bridge_0_m0_address,                                              //                                                mm_bridge_0_m0.address
		output wire        mm_bridge_0_m0_waitrequest,                                          //                                                              .waitrequest
		input  wire [0:0]  mm_bridge_0_m0_burstcount,                                           //                                                              .burstcount
		input  wire [3:0]  mm_bridge_0_m0_byteenable,                                           //                                                              .byteenable
		input  wire        mm_bridge_0_m0_read,                                                 //                                                              .read
		output wire [31:0] mm_bridge_0_m0_readdata,                                             //                                                              .readdata
		output wire        mm_bridge_0_m0_readdatavalid,                                        //                                                              .readdatavalid
		input  wire        mm_bridge_0_m0_write,                                                //                                                              .write
		input  wire [31:0] mm_bridge_0_m0_writedata,                                            //                                                              .writedata
		input  wire        mm_bridge_0_m0_debugaccess,                                          //                                                              .debugaccess
		input  wire [29:0] mm_master_bfm_0_m0_address,                                          //                                            mm_master_bfm_0_m0.address
		output wire        mm_master_bfm_0_m0_waitrequest,                                      //                                                              .waitrequest
		input  wire [2:0]  mm_master_bfm_0_m0_burstcount,                                       //                                                              .burstcount
		input  wire [3:0]  mm_master_bfm_0_m0_byteenable,                                       //                                                              .byteenable
		input  wire        mm_master_bfm_0_m0_read,                                             //                                                              .read
		output wire [31:0] mm_master_bfm_0_m0_readdata,                                         //                                                              .readdata
		output wire        mm_master_bfm_0_m0_readdatavalid,                                    //                                                              .readdatavalid
		input  wire        mm_master_bfm_0_m0_write,                                            //                                                              .write
		input  wire [31:0] mm_master_bfm_0_m0_writedata,                                        //                                                              .writedata
		output wire [2:0]  dma_0_control_port_slave_address,                                    //                                      dma_0_control_port_slave.address
		output wire        dma_0_control_port_slave_write,                                      //                                                              .write
		input  wire [27:0] dma_0_control_port_slave_readdata,                                   //                                                              .readdata
		output wire [27:0] dma_0_control_port_slave_writedata,                                  //                                                              .writedata
		output wire        dma_0_control_port_slave_chipselect,                                 //                                                              .chipselect
		output wire [23:0] mem_if_ddr3_emif_0_avl_address,                                      //                                        mem_if_ddr3_emif_0_avl.address
		output wire        mem_if_ddr3_emif_0_avl_write,                                        //                                                              .write
		output wire        mem_if_ddr3_emif_0_avl_read,                                         //                                                              .read
		input  wire [63:0] mem_if_ddr3_emif_0_avl_readdata,                                     //                                                              .readdata
		output wire [63:0] mem_if_ddr3_emif_0_avl_writedata,                                    //                                                              .writedata
		output wire        mem_if_ddr3_emif_0_avl_beginbursttransfer,                           //                                                              .beginbursttransfer
		output wire [9:0]  mem_if_ddr3_emif_0_avl_burstcount,                                   //                                                              .burstcount
		output wire [7:0]  mem_if_ddr3_emif_0_avl_byteenable,                                   //                                                              .byteenable
		input  wire        mem_if_ddr3_emif_0_avl_readdatavalid,                                //                                                              .readdatavalid
		input  wire        mem_if_ddr3_emif_0_avl_waitrequest,                                  //                                                              .waitrequest
		output wire [14:0] onchip_memory2_0_s1_address,                                         //                                           onchip_memory2_0_s1.address
		output wire        onchip_memory2_0_s1_write,                                           //                                                              .write
		input  wire [7:0]  onchip_memory2_0_s1_readdata,                                        //                                                              .readdata
		output wire [7:0]  onchip_memory2_0_s1_writedata,                                       //                                                              .writedata
		output wire        onchip_memory2_0_s1_chipselect,                                      //                                                              .chipselect
		output wire        onchip_memory2_0_s1_clken,                                           //                                                              .clken
		output wire [1:0]  pio_0_s1_address,                                                    //                                                      pio_0_s1.address
		output wire        pio_0_s1_write,                                                      //                                                              .write
		input  wire [31:0] pio_0_s1_readdata,                                                   //                                                              .readdata
		output wire [31:0] pio_0_s1_writedata,                                                  //                                                              .writedata
		output wire        pio_0_s1_chipselect,                                                 //                                                              .chipselect
		output wire [0:0]  sysid_qsys_0_control_slave_address,                                  //                                    sysid_qsys_0_control_slave.address
		input  wire [31:0] sysid_qsys_0_control_slave_readdata                                  //                                                              .readdata
	);

	wire          mm_master_bfm_0_m0_translator_avalon_universal_master_0_waitrequest;              // mm_master_bfm_0_m0_agent:av_waitrequest -> mm_master_bfm_0_m0_translator:uav_waitrequest
	wire   [31:0] mm_master_bfm_0_m0_translator_avalon_universal_master_0_readdata;                 // mm_master_bfm_0_m0_agent:av_readdata -> mm_master_bfm_0_m0_translator:uav_readdata
	wire          mm_master_bfm_0_m0_translator_avalon_universal_master_0_debugaccess;              // mm_master_bfm_0_m0_translator:uav_debugaccess -> mm_master_bfm_0_m0_agent:av_debugaccess
	wire   [31:0] mm_master_bfm_0_m0_translator_avalon_universal_master_0_address;                  // mm_master_bfm_0_m0_translator:uav_address -> mm_master_bfm_0_m0_agent:av_address
	wire          mm_master_bfm_0_m0_translator_avalon_universal_master_0_read;                     // mm_master_bfm_0_m0_translator:uav_read -> mm_master_bfm_0_m0_agent:av_read
	wire    [3:0] mm_master_bfm_0_m0_translator_avalon_universal_master_0_byteenable;               // mm_master_bfm_0_m0_translator:uav_byteenable -> mm_master_bfm_0_m0_agent:av_byteenable
	wire          mm_master_bfm_0_m0_translator_avalon_universal_master_0_readdatavalid;            // mm_master_bfm_0_m0_agent:av_readdatavalid -> mm_master_bfm_0_m0_translator:uav_readdatavalid
	wire          mm_master_bfm_0_m0_translator_avalon_universal_master_0_lock;                     // mm_master_bfm_0_m0_translator:uav_lock -> mm_master_bfm_0_m0_agent:av_lock
	wire          mm_master_bfm_0_m0_translator_avalon_universal_master_0_write;                    // mm_master_bfm_0_m0_translator:uav_write -> mm_master_bfm_0_m0_agent:av_write
	wire   [31:0] mm_master_bfm_0_m0_translator_avalon_universal_master_0_writedata;                // mm_master_bfm_0_m0_translator:uav_writedata -> mm_master_bfm_0_m0_agent:av_writedata
	wire    [4:0] mm_master_bfm_0_m0_translator_avalon_universal_master_0_burstcount;               // mm_master_bfm_0_m0_translator:uav_burstcount -> mm_master_bfm_0_m0_agent:av_burstcount
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest;                  // mm_bridge_0_m0_agent:av_waitrequest -> mm_bridge_0_m0_translator:uav_waitrequest
	wire   [31:0] mm_bridge_0_m0_translator_avalon_universal_master_0_readdata;                     // mm_bridge_0_m0_agent:av_readdata -> mm_bridge_0_m0_translator:uav_readdata
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess;                  // mm_bridge_0_m0_translator:uav_debugaccess -> mm_bridge_0_m0_agent:av_debugaccess
	wire   [31:0] mm_bridge_0_m0_translator_avalon_universal_master_0_address;                      // mm_bridge_0_m0_translator:uav_address -> mm_bridge_0_m0_agent:av_address
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_read;                         // mm_bridge_0_m0_translator:uav_read -> mm_bridge_0_m0_agent:av_read
	wire    [3:0] mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable;                   // mm_bridge_0_m0_translator:uav_byteenable -> mm_bridge_0_m0_agent:av_byteenable
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid;                // mm_bridge_0_m0_agent:av_readdatavalid -> mm_bridge_0_m0_translator:uav_readdatavalid
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_lock;                         // mm_bridge_0_m0_translator:uav_lock -> mm_bridge_0_m0_agent:av_lock
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_write;                        // mm_bridge_0_m0_translator:uav_write -> mm_bridge_0_m0_agent:av_write
	wire   [31:0] mm_bridge_0_m0_translator_avalon_universal_master_0_writedata;                    // mm_bridge_0_m0_translator:uav_writedata -> mm_bridge_0_m0_agent:av_writedata
	wire    [2:0] mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount;                   // mm_bridge_0_m0_translator:uav_burstcount -> mm_bridge_0_m0_agent:av_burstcount
	wire          master_0_master_translator_avalon_universal_master_0_waitrequest;                 // master_0_master_agent:av_waitrequest -> master_0_master_translator:uav_waitrequest
	wire   [31:0] master_0_master_translator_avalon_universal_master_0_readdata;                    // master_0_master_agent:av_readdata -> master_0_master_translator:uav_readdata
	wire          master_0_master_translator_avalon_universal_master_0_debugaccess;                 // master_0_master_translator:uav_debugaccess -> master_0_master_agent:av_debugaccess
	wire   [31:0] master_0_master_translator_avalon_universal_master_0_address;                     // master_0_master_translator:uav_address -> master_0_master_agent:av_address
	wire          master_0_master_translator_avalon_universal_master_0_read;                        // master_0_master_translator:uav_read -> master_0_master_agent:av_read
	wire    [3:0] master_0_master_translator_avalon_universal_master_0_byteenable;                  // master_0_master_translator:uav_byteenable -> master_0_master_agent:av_byteenable
	wire          master_0_master_translator_avalon_universal_master_0_readdatavalid;               // master_0_master_agent:av_readdatavalid -> master_0_master_translator:uav_readdatavalid
	wire          master_0_master_translator_avalon_universal_master_0_lock;                        // master_0_master_translator:uav_lock -> master_0_master_agent:av_lock
	wire          master_0_master_translator_avalon_universal_master_0_write;                       // master_0_master_translator:uav_write -> master_0_master_agent:av_write
	wire   [31:0] master_0_master_translator_avalon_universal_master_0_writedata;                   // master_0_master_translator:uav_writedata -> master_0_master_agent:av_writedata
	wire    [2:0] master_0_master_translator_avalon_universal_master_0_burstcount;                  // master_0_master_translator:uav_burstcount -> master_0_master_agent:av_burstcount
	wire          dma_0_write_master_translator_avalon_universal_master_0_waitrequest;              // dma_0_write_master_agent:av_waitrequest -> dma_0_write_master_translator:uav_waitrequest
	wire   [63:0] dma_0_write_master_translator_avalon_universal_master_0_readdata;                 // dma_0_write_master_agent:av_readdata -> dma_0_write_master_translator:uav_readdata
	wire          dma_0_write_master_translator_avalon_universal_master_0_debugaccess;              // dma_0_write_master_translator:uav_debugaccess -> dma_0_write_master_agent:av_debugaccess
	wire   [31:0] dma_0_write_master_translator_avalon_universal_master_0_address;                  // dma_0_write_master_translator:uav_address -> dma_0_write_master_agent:av_address
	wire          dma_0_write_master_translator_avalon_universal_master_0_read;                     // dma_0_write_master_translator:uav_read -> dma_0_write_master_agent:av_read
	wire    [7:0] dma_0_write_master_translator_avalon_universal_master_0_byteenable;               // dma_0_write_master_translator:uav_byteenable -> dma_0_write_master_agent:av_byteenable
	wire          dma_0_write_master_translator_avalon_universal_master_0_readdatavalid;            // dma_0_write_master_agent:av_readdatavalid -> dma_0_write_master_translator:uav_readdatavalid
	wire          dma_0_write_master_translator_avalon_universal_master_0_lock;                     // dma_0_write_master_translator:uav_lock -> dma_0_write_master_agent:av_lock
	wire          dma_0_write_master_translator_avalon_universal_master_0_write;                    // dma_0_write_master_translator:uav_write -> dma_0_write_master_agent:av_write
	wire   [63:0] dma_0_write_master_translator_avalon_universal_master_0_writedata;                // dma_0_write_master_translator:uav_writedata -> dma_0_write_master_agent:av_writedata
	wire   [10:0] dma_0_write_master_translator_avalon_universal_master_0_burstcount;               // dma_0_write_master_translator:uav_burstcount -> dma_0_write_master_agent:av_burstcount
	wire          rsp_mux_003_src_valid;                                                            // rsp_mux_003:src_valid -> dma_0_write_master_agent:rp_valid
	wire  [155:0] rsp_mux_003_src_data;                                                             // rsp_mux_003:src_data -> dma_0_write_master_agent:rp_data
	wire          rsp_mux_003_src_ready;                                                            // dma_0_write_master_agent:rp_ready -> rsp_mux_003:src_ready
	wire    [4:0] rsp_mux_003_src_channel;                                                          // rsp_mux_003:src_channel -> dma_0_write_master_agent:rp_channel
	wire          rsp_mux_003_src_startofpacket;                                                    // rsp_mux_003:src_startofpacket -> dma_0_write_master_agent:rp_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                      // rsp_mux_003:src_endofpacket -> dma_0_write_master_agent:rp_endofpacket
	wire          dma_0_read_master_translator_avalon_universal_master_0_waitrequest;               // dma_0_read_master_agent:av_waitrequest -> dma_0_read_master_translator:uav_waitrequest
	wire   [63:0] dma_0_read_master_translator_avalon_universal_master_0_readdata;                  // dma_0_read_master_agent:av_readdata -> dma_0_read_master_translator:uav_readdata
	wire          dma_0_read_master_translator_avalon_universal_master_0_debugaccess;               // dma_0_read_master_translator:uav_debugaccess -> dma_0_read_master_agent:av_debugaccess
	wire   [31:0] dma_0_read_master_translator_avalon_universal_master_0_address;                   // dma_0_read_master_translator:uav_address -> dma_0_read_master_agent:av_address
	wire          dma_0_read_master_translator_avalon_universal_master_0_read;                      // dma_0_read_master_translator:uav_read -> dma_0_read_master_agent:av_read
	wire    [7:0] dma_0_read_master_translator_avalon_universal_master_0_byteenable;                // dma_0_read_master_translator:uav_byteenable -> dma_0_read_master_agent:av_byteenable
	wire          dma_0_read_master_translator_avalon_universal_master_0_readdatavalid;             // dma_0_read_master_agent:av_readdatavalid -> dma_0_read_master_translator:uav_readdatavalid
	wire          dma_0_read_master_translator_avalon_universal_master_0_lock;                      // dma_0_read_master_translator:uav_lock -> dma_0_read_master_agent:av_lock
	wire          dma_0_read_master_translator_avalon_universal_master_0_write;                     // dma_0_read_master_translator:uav_write -> dma_0_read_master_agent:av_write
	wire   [63:0] dma_0_read_master_translator_avalon_universal_master_0_writedata;                 // dma_0_read_master_translator:uav_writedata -> dma_0_read_master_agent:av_writedata
	wire   [10:0] dma_0_read_master_translator_avalon_universal_master_0_burstcount;                // dma_0_read_master_translator:uav_burstcount -> dma_0_read_master_agent:av_burstcount
	wire          rsp_mux_004_src_valid;                                                            // rsp_mux_004:src_valid -> dma_0_read_master_agent:rp_valid
	wire  [155:0] rsp_mux_004_src_data;                                                             // rsp_mux_004:src_data -> dma_0_read_master_agent:rp_data
	wire          rsp_mux_004_src_ready;                                                            // dma_0_read_master_agent:rp_ready -> rsp_mux_004:src_ready
	wire    [4:0] rsp_mux_004_src_channel;                                                          // rsp_mux_004:src_channel -> dma_0_read_master_agent:rp_channel
	wire          rsp_mux_004_src_startofpacket;                                                    // rsp_mux_004:src_startofpacket -> dma_0_read_master_agent:rp_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                      // rsp_mux_004:src_endofpacket -> dma_0_read_master_agent:rp_endofpacket
	wire   [63:0] mem_if_ddr3_emif_0_avl_agent_m0_readdata;                                         // mem_if_ddr3_emif_0_avl_translator:uav_readdata -> mem_if_ddr3_emif_0_avl_agent:m0_readdata
	wire          mem_if_ddr3_emif_0_avl_agent_m0_waitrequest;                                      // mem_if_ddr3_emif_0_avl_translator:uav_waitrequest -> mem_if_ddr3_emif_0_avl_agent:m0_waitrequest
	wire          mem_if_ddr3_emif_0_avl_agent_m0_debugaccess;                                      // mem_if_ddr3_emif_0_avl_agent:m0_debugaccess -> mem_if_ddr3_emif_0_avl_translator:uav_debugaccess
	wire   [31:0] mem_if_ddr3_emif_0_avl_agent_m0_address;                                          // mem_if_ddr3_emif_0_avl_agent:m0_address -> mem_if_ddr3_emif_0_avl_translator:uav_address
	wire    [7:0] mem_if_ddr3_emif_0_avl_agent_m0_byteenable;                                       // mem_if_ddr3_emif_0_avl_agent:m0_byteenable -> mem_if_ddr3_emif_0_avl_translator:uav_byteenable
	wire          mem_if_ddr3_emif_0_avl_agent_m0_read;                                             // mem_if_ddr3_emif_0_avl_agent:m0_read -> mem_if_ddr3_emif_0_avl_translator:uav_read
	wire          mem_if_ddr3_emif_0_avl_agent_m0_readdatavalid;                                    // mem_if_ddr3_emif_0_avl_translator:uav_readdatavalid -> mem_if_ddr3_emif_0_avl_agent:m0_readdatavalid
	wire          mem_if_ddr3_emif_0_avl_agent_m0_lock;                                             // mem_if_ddr3_emif_0_avl_agent:m0_lock -> mem_if_ddr3_emif_0_avl_translator:uav_lock
	wire   [63:0] mem_if_ddr3_emif_0_avl_agent_m0_writedata;                                        // mem_if_ddr3_emif_0_avl_agent:m0_writedata -> mem_if_ddr3_emif_0_avl_translator:uav_writedata
	wire          mem_if_ddr3_emif_0_avl_agent_m0_write;                                            // mem_if_ddr3_emif_0_avl_agent:m0_write -> mem_if_ddr3_emif_0_avl_translator:uav_write
	wire   [12:0] mem_if_ddr3_emif_0_avl_agent_m0_burstcount;                                       // mem_if_ddr3_emif_0_avl_agent:m0_burstcount -> mem_if_ddr3_emif_0_avl_translator:uav_burstcount
	wire          mem_if_ddr3_emif_0_avl_agent_rf_source_valid;                                     // mem_if_ddr3_emif_0_avl_agent:rf_source_valid -> mem_if_ddr3_emif_0_avl_agent_rsp_fifo:in_valid
	wire  [156:0] mem_if_ddr3_emif_0_avl_agent_rf_source_data;                                      // mem_if_ddr3_emif_0_avl_agent:rf_source_data -> mem_if_ddr3_emif_0_avl_agent_rsp_fifo:in_data
	wire          mem_if_ddr3_emif_0_avl_agent_rf_source_ready;                                     // mem_if_ddr3_emif_0_avl_agent_rsp_fifo:in_ready -> mem_if_ddr3_emif_0_avl_agent:rf_source_ready
	wire          mem_if_ddr3_emif_0_avl_agent_rf_source_startofpacket;                             // mem_if_ddr3_emif_0_avl_agent:rf_source_startofpacket -> mem_if_ddr3_emif_0_avl_agent_rsp_fifo:in_startofpacket
	wire          mem_if_ddr3_emif_0_avl_agent_rf_source_endofpacket;                               // mem_if_ddr3_emif_0_avl_agent:rf_source_endofpacket -> mem_if_ddr3_emif_0_avl_agent_rsp_fifo:in_endofpacket
	wire          mem_if_ddr3_emif_0_avl_agent_rsp_fifo_out_valid;                                  // mem_if_ddr3_emif_0_avl_agent_rsp_fifo:out_valid -> mem_if_ddr3_emif_0_avl_agent:rf_sink_valid
	wire  [156:0] mem_if_ddr3_emif_0_avl_agent_rsp_fifo_out_data;                                   // mem_if_ddr3_emif_0_avl_agent_rsp_fifo:out_data -> mem_if_ddr3_emif_0_avl_agent:rf_sink_data
	wire          mem_if_ddr3_emif_0_avl_agent_rsp_fifo_out_ready;                                  // mem_if_ddr3_emif_0_avl_agent:rf_sink_ready -> mem_if_ddr3_emif_0_avl_agent_rsp_fifo:out_ready
	wire          mem_if_ddr3_emif_0_avl_agent_rsp_fifo_out_startofpacket;                          // mem_if_ddr3_emif_0_avl_agent_rsp_fifo:out_startofpacket -> mem_if_ddr3_emif_0_avl_agent:rf_sink_startofpacket
	wire          mem_if_ddr3_emif_0_avl_agent_rsp_fifo_out_endofpacket;                            // mem_if_ddr3_emif_0_avl_agent_rsp_fifo:out_endofpacket -> mem_if_ddr3_emif_0_avl_agent:rf_sink_endofpacket
	wire          mem_if_ddr3_emif_0_avl_agent_rdata_fifo_src_valid;                                // mem_if_ddr3_emif_0_avl_agent:rdata_fifo_src_valid -> mem_if_ddr3_emif_0_avl_agent_rdata_fifo:in_valid
	wire   [65:0] mem_if_ddr3_emif_0_avl_agent_rdata_fifo_src_data;                                 // mem_if_ddr3_emif_0_avl_agent:rdata_fifo_src_data -> mem_if_ddr3_emif_0_avl_agent_rdata_fifo:in_data
	wire          mem_if_ddr3_emif_0_avl_agent_rdata_fifo_src_ready;                                // mem_if_ddr3_emif_0_avl_agent_rdata_fifo:in_ready -> mem_if_ddr3_emif_0_avl_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_valid;                                                                // cmd_mux:src_valid -> mem_if_ddr3_emif_0_avl_agent:cp_valid
	wire  [155:0] cmd_mux_src_data;                                                                 // cmd_mux:src_data -> mem_if_ddr3_emif_0_avl_agent:cp_data
	wire          cmd_mux_src_ready;                                                                // mem_if_ddr3_emif_0_avl_agent:cp_ready -> cmd_mux:src_ready
	wire    [4:0] cmd_mux_src_channel;                                                              // cmd_mux:src_channel -> mem_if_ddr3_emif_0_avl_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                        // cmd_mux:src_startofpacket -> mem_if_ddr3_emif_0_avl_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                          // cmd_mux:src_endofpacket -> mem_if_ddr3_emif_0_avl_agent:cp_endofpacket
	wire   [31:0] dma_0_control_port_slave_agent_m0_readdata;                                       // dma_0_control_port_slave_translator:uav_readdata -> dma_0_control_port_slave_agent:m0_readdata
	wire          dma_0_control_port_slave_agent_m0_waitrequest;                                    // dma_0_control_port_slave_translator:uav_waitrequest -> dma_0_control_port_slave_agent:m0_waitrequest
	wire          dma_0_control_port_slave_agent_m0_debugaccess;                                    // dma_0_control_port_slave_agent:m0_debugaccess -> dma_0_control_port_slave_translator:uav_debugaccess
	wire   [31:0] dma_0_control_port_slave_agent_m0_address;                                        // dma_0_control_port_slave_agent:m0_address -> dma_0_control_port_slave_translator:uav_address
	wire    [3:0] dma_0_control_port_slave_agent_m0_byteenable;                                     // dma_0_control_port_slave_agent:m0_byteenable -> dma_0_control_port_slave_translator:uav_byteenable
	wire          dma_0_control_port_slave_agent_m0_read;                                           // dma_0_control_port_slave_agent:m0_read -> dma_0_control_port_slave_translator:uav_read
	wire          dma_0_control_port_slave_agent_m0_readdatavalid;                                  // dma_0_control_port_slave_translator:uav_readdatavalid -> dma_0_control_port_slave_agent:m0_readdatavalid
	wire          dma_0_control_port_slave_agent_m0_lock;                                           // dma_0_control_port_slave_agent:m0_lock -> dma_0_control_port_slave_translator:uav_lock
	wire   [31:0] dma_0_control_port_slave_agent_m0_writedata;                                      // dma_0_control_port_slave_agent:m0_writedata -> dma_0_control_port_slave_translator:uav_writedata
	wire          dma_0_control_port_slave_agent_m0_write;                                          // dma_0_control_port_slave_agent:m0_write -> dma_0_control_port_slave_translator:uav_write
	wire    [2:0] dma_0_control_port_slave_agent_m0_burstcount;                                     // dma_0_control_port_slave_agent:m0_burstcount -> dma_0_control_port_slave_translator:uav_burstcount
	wire          dma_0_control_port_slave_agent_rf_source_valid;                                   // dma_0_control_port_slave_agent:rf_source_valid -> dma_0_control_port_slave_agent_rsp_fifo:in_valid
	wire  [120:0] dma_0_control_port_slave_agent_rf_source_data;                                    // dma_0_control_port_slave_agent:rf_source_data -> dma_0_control_port_slave_agent_rsp_fifo:in_data
	wire          dma_0_control_port_slave_agent_rf_source_ready;                                   // dma_0_control_port_slave_agent_rsp_fifo:in_ready -> dma_0_control_port_slave_agent:rf_source_ready
	wire          dma_0_control_port_slave_agent_rf_source_startofpacket;                           // dma_0_control_port_slave_agent:rf_source_startofpacket -> dma_0_control_port_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_0_control_port_slave_agent_rf_source_endofpacket;                             // dma_0_control_port_slave_agent:rf_source_endofpacket -> dma_0_control_port_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_0_control_port_slave_agent_rsp_fifo_out_valid;                                // dma_0_control_port_slave_agent_rsp_fifo:out_valid -> dma_0_control_port_slave_agent:rf_sink_valid
	wire  [120:0] dma_0_control_port_slave_agent_rsp_fifo_out_data;                                 // dma_0_control_port_slave_agent_rsp_fifo:out_data -> dma_0_control_port_slave_agent:rf_sink_data
	wire          dma_0_control_port_slave_agent_rsp_fifo_out_ready;                                // dma_0_control_port_slave_agent:rf_sink_ready -> dma_0_control_port_slave_agent_rsp_fifo:out_ready
	wire          dma_0_control_port_slave_agent_rsp_fifo_out_startofpacket;                        // dma_0_control_port_slave_agent_rsp_fifo:out_startofpacket -> dma_0_control_port_slave_agent:rf_sink_startofpacket
	wire          dma_0_control_port_slave_agent_rsp_fifo_out_endofpacket;                          // dma_0_control_port_slave_agent_rsp_fifo:out_endofpacket -> dma_0_control_port_slave_agent:rf_sink_endofpacket
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_readdata;                                     // sysid_qsys_0_control_slave_translator:uav_readdata -> sysid_qsys_0_control_slave_agent:m0_readdata
	wire          sysid_qsys_0_control_slave_agent_m0_waitrequest;                                  // sysid_qsys_0_control_slave_translator:uav_waitrequest -> sysid_qsys_0_control_slave_agent:m0_waitrequest
	wire          sysid_qsys_0_control_slave_agent_m0_debugaccess;                                  // sysid_qsys_0_control_slave_agent:m0_debugaccess -> sysid_qsys_0_control_slave_translator:uav_debugaccess
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_address;                                      // sysid_qsys_0_control_slave_agent:m0_address -> sysid_qsys_0_control_slave_translator:uav_address
	wire    [3:0] sysid_qsys_0_control_slave_agent_m0_byteenable;                                   // sysid_qsys_0_control_slave_agent:m0_byteenable -> sysid_qsys_0_control_slave_translator:uav_byteenable
	wire          sysid_qsys_0_control_slave_agent_m0_read;                                         // sysid_qsys_0_control_slave_agent:m0_read -> sysid_qsys_0_control_slave_translator:uav_read
	wire          sysid_qsys_0_control_slave_agent_m0_readdatavalid;                                // sysid_qsys_0_control_slave_translator:uav_readdatavalid -> sysid_qsys_0_control_slave_agent:m0_readdatavalid
	wire          sysid_qsys_0_control_slave_agent_m0_lock;                                         // sysid_qsys_0_control_slave_agent:m0_lock -> sysid_qsys_0_control_slave_translator:uav_lock
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_writedata;                                    // sysid_qsys_0_control_slave_agent:m0_writedata -> sysid_qsys_0_control_slave_translator:uav_writedata
	wire          sysid_qsys_0_control_slave_agent_m0_write;                                        // sysid_qsys_0_control_slave_agent:m0_write -> sysid_qsys_0_control_slave_translator:uav_write
	wire    [2:0] sysid_qsys_0_control_slave_agent_m0_burstcount;                                   // sysid_qsys_0_control_slave_agent:m0_burstcount -> sysid_qsys_0_control_slave_translator:uav_burstcount
	wire          sysid_qsys_0_control_slave_agent_rf_source_valid;                                 // sysid_qsys_0_control_slave_agent:rf_source_valid -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_valid
	wire  [120:0] sysid_qsys_0_control_slave_agent_rf_source_data;                                  // sysid_qsys_0_control_slave_agent:rf_source_data -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_data
	wire          sysid_qsys_0_control_slave_agent_rf_source_ready;                                 // sysid_qsys_0_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_0_control_slave_agent:rf_source_ready
	wire          sysid_qsys_0_control_slave_agent_rf_source_startofpacket;                         // sysid_qsys_0_control_slave_agent:rf_source_startofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rf_source_endofpacket;                           // sysid_qsys_0_control_slave_agent:rf_source_endofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid;                              // sysid_qsys_0_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_0_control_slave_agent:rf_sink_valid
	wire  [120:0] sysid_qsys_0_control_slave_agent_rsp_fifo_out_data;                               // sysid_qsys_0_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_0_control_slave_agent:rf_sink_data
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready;                              // sysid_qsys_0_control_slave_agent:rf_sink_ready -> sysid_qsys_0_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket;                      // sysid_qsys_0_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket;                        // sysid_qsys_0_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_endofpacket
	wire   [31:0] pio_0_s1_agent_m0_readdata;                                                       // pio_0_s1_translator:uav_readdata -> pio_0_s1_agent:m0_readdata
	wire          pio_0_s1_agent_m0_waitrequest;                                                    // pio_0_s1_translator:uav_waitrequest -> pio_0_s1_agent:m0_waitrequest
	wire          pio_0_s1_agent_m0_debugaccess;                                                    // pio_0_s1_agent:m0_debugaccess -> pio_0_s1_translator:uav_debugaccess
	wire   [31:0] pio_0_s1_agent_m0_address;                                                        // pio_0_s1_agent:m0_address -> pio_0_s1_translator:uav_address
	wire    [3:0] pio_0_s1_agent_m0_byteenable;                                                     // pio_0_s1_agent:m0_byteenable -> pio_0_s1_translator:uav_byteenable
	wire          pio_0_s1_agent_m0_read;                                                           // pio_0_s1_agent:m0_read -> pio_0_s1_translator:uav_read
	wire          pio_0_s1_agent_m0_readdatavalid;                                                  // pio_0_s1_translator:uav_readdatavalid -> pio_0_s1_agent:m0_readdatavalid
	wire          pio_0_s1_agent_m0_lock;                                                           // pio_0_s1_agent:m0_lock -> pio_0_s1_translator:uav_lock
	wire   [31:0] pio_0_s1_agent_m0_writedata;                                                      // pio_0_s1_agent:m0_writedata -> pio_0_s1_translator:uav_writedata
	wire          pio_0_s1_agent_m0_write;                                                          // pio_0_s1_agent:m0_write -> pio_0_s1_translator:uav_write
	wire    [2:0] pio_0_s1_agent_m0_burstcount;                                                     // pio_0_s1_agent:m0_burstcount -> pio_0_s1_translator:uav_burstcount
	wire          pio_0_s1_agent_rf_source_valid;                                                   // pio_0_s1_agent:rf_source_valid -> pio_0_s1_agent_rsp_fifo:in_valid
	wire  [120:0] pio_0_s1_agent_rf_source_data;                                                    // pio_0_s1_agent:rf_source_data -> pio_0_s1_agent_rsp_fifo:in_data
	wire          pio_0_s1_agent_rf_source_ready;                                                   // pio_0_s1_agent_rsp_fifo:in_ready -> pio_0_s1_agent:rf_source_ready
	wire          pio_0_s1_agent_rf_source_startofpacket;                                           // pio_0_s1_agent:rf_source_startofpacket -> pio_0_s1_agent_rsp_fifo:in_startofpacket
	wire          pio_0_s1_agent_rf_source_endofpacket;                                             // pio_0_s1_agent:rf_source_endofpacket -> pio_0_s1_agent_rsp_fifo:in_endofpacket
	wire          pio_0_s1_agent_rsp_fifo_out_valid;                                                // pio_0_s1_agent_rsp_fifo:out_valid -> pio_0_s1_agent:rf_sink_valid
	wire  [120:0] pio_0_s1_agent_rsp_fifo_out_data;                                                 // pio_0_s1_agent_rsp_fifo:out_data -> pio_0_s1_agent:rf_sink_data
	wire          pio_0_s1_agent_rsp_fifo_out_ready;                                                // pio_0_s1_agent:rf_sink_ready -> pio_0_s1_agent_rsp_fifo:out_ready
	wire          pio_0_s1_agent_rsp_fifo_out_startofpacket;                                        // pio_0_s1_agent_rsp_fifo:out_startofpacket -> pio_0_s1_agent:rf_sink_startofpacket
	wire          pio_0_s1_agent_rsp_fifo_out_endofpacket;                                          // pio_0_s1_agent_rsp_fifo:out_endofpacket -> pio_0_s1_agent:rf_sink_endofpacket
	wire    [7:0] onchip_memory2_0_s1_agent_m0_readdata;                                            // onchip_memory2_0_s1_translator:uav_readdata -> onchip_memory2_0_s1_agent:m0_readdata
	wire          onchip_memory2_0_s1_agent_m0_waitrequest;                                         // onchip_memory2_0_s1_translator:uav_waitrequest -> onchip_memory2_0_s1_agent:m0_waitrequest
	wire          onchip_memory2_0_s1_agent_m0_debugaccess;                                         // onchip_memory2_0_s1_agent:m0_debugaccess -> onchip_memory2_0_s1_translator:uav_debugaccess
	wire   [31:0] onchip_memory2_0_s1_agent_m0_address;                                             // onchip_memory2_0_s1_agent:m0_address -> onchip_memory2_0_s1_translator:uav_address
	wire    [0:0] onchip_memory2_0_s1_agent_m0_byteenable;                                          // onchip_memory2_0_s1_agent:m0_byteenable -> onchip_memory2_0_s1_translator:uav_byteenable
	wire          onchip_memory2_0_s1_agent_m0_read;                                                // onchip_memory2_0_s1_agent:m0_read -> onchip_memory2_0_s1_translator:uav_read
	wire          onchip_memory2_0_s1_agent_m0_readdatavalid;                                       // onchip_memory2_0_s1_translator:uav_readdatavalid -> onchip_memory2_0_s1_agent:m0_readdatavalid
	wire          onchip_memory2_0_s1_agent_m0_lock;                                                // onchip_memory2_0_s1_agent:m0_lock -> onchip_memory2_0_s1_translator:uav_lock
	wire    [7:0] onchip_memory2_0_s1_agent_m0_writedata;                                           // onchip_memory2_0_s1_agent:m0_writedata -> onchip_memory2_0_s1_translator:uav_writedata
	wire          onchip_memory2_0_s1_agent_m0_write;                                               // onchip_memory2_0_s1_agent:m0_write -> onchip_memory2_0_s1_translator:uav_write
	wire    [0:0] onchip_memory2_0_s1_agent_m0_burstcount;                                          // onchip_memory2_0_s1_agent:m0_burstcount -> onchip_memory2_0_s1_translator:uav_burstcount
	wire          onchip_memory2_0_s1_agent_rf_source_valid;                                        // onchip_memory2_0_s1_agent:rf_source_valid -> onchip_memory2_0_s1_agent_rsp_fifo:in_valid
	wire   [93:0] onchip_memory2_0_s1_agent_rf_source_data;                                         // onchip_memory2_0_s1_agent:rf_source_data -> onchip_memory2_0_s1_agent_rsp_fifo:in_data
	wire          onchip_memory2_0_s1_agent_rf_source_ready;                                        // onchip_memory2_0_s1_agent_rsp_fifo:in_ready -> onchip_memory2_0_s1_agent:rf_source_ready
	wire          onchip_memory2_0_s1_agent_rf_source_startofpacket;                                // onchip_memory2_0_s1_agent:rf_source_startofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory2_0_s1_agent_rf_source_endofpacket;                                  // onchip_memory2_0_s1_agent:rf_source_endofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_valid;                                     // onchip_memory2_0_s1_agent_rsp_fifo:out_valid -> onchip_memory2_0_s1_agent:rf_sink_valid
	wire   [93:0] onchip_memory2_0_s1_agent_rsp_fifo_out_data;                                      // onchip_memory2_0_s1_agent_rsp_fifo:out_data -> onchip_memory2_0_s1_agent:rf_sink_data
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_ready;                                     // onchip_memory2_0_s1_agent:rf_sink_ready -> onchip_memory2_0_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket;                             // onchip_memory2_0_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s1_agent:rf_sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket;                               // onchip_memory2_0_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s1_agent:rf_sink_endofpacket
	wire          mm_master_bfm_0_m0_agent_cp_valid;                                                // mm_master_bfm_0_m0_agent:cp_valid -> router:sink_valid
	wire  [119:0] mm_master_bfm_0_m0_agent_cp_data;                                                 // mm_master_bfm_0_m0_agent:cp_data -> router:sink_data
	wire          mm_master_bfm_0_m0_agent_cp_ready;                                                // router:sink_ready -> mm_master_bfm_0_m0_agent:cp_ready
	wire          mm_master_bfm_0_m0_agent_cp_startofpacket;                                        // mm_master_bfm_0_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          mm_master_bfm_0_m0_agent_cp_endofpacket;                                          // mm_master_bfm_0_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          mm_bridge_0_m0_agent_cp_valid;                                                    // mm_bridge_0_m0_agent:cp_valid -> router_001:sink_valid
	wire  [119:0] mm_bridge_0_m0_agent_cp_data;                                                     // mm_bridge_0_m0_agent:cp_data -> router_001:sink_data
	wire          mm_bridge_0_m0_agent_cp_ready;                                                    // router_001:sink_ready -> mm_bridge_0_m0_agent:cp_ready
	wire          mm_bridge_0_m0_agent_cp_startofpacket;                                            // mm_bridge_0_m0_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          mm_bridge_0_m0_agent_cp_endofpacket;                                              // mm_bridge_0_m0_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          master_0_master_agent_cp_valid;                                                   // master_0_master_agent:cp_valid -> router_002:sink_valid
	wire  [119:0] master_0_master_agent_cp_data;                                                    // master_0_master_agent:cp_data -> router_002:sink_data
	wire          master_0_master_agent_cp_ready;                                                   // router_002:sink_ready -> master_0_master_agent:cp_ready
	wire          master_0_master_agent_cp_startofpacket;                                           // master_0_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          master_0_master_agent_cp_endofpacket;                                             // master_0_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          dma_0_write_master_agent_cp_valid;                                                // dma_0_write_master_agent:cp_valid -> router_003:sink_valid
	wire  [155:0] dma_0_write_master_agent_cp_data;                                                 // dma_0_write_master_agent:cp_data -> router_003:sink_data
	wire          dma_0_write_master_agent_cp_ready;                                                // router_003:sink_ready -> dma_0_write_master_agent:cp_ready
	wire          dma_0_write_master_agent_cp_startofpacket;                                        // dma_0_write_master_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          dma_0_write_master_agent_cp_endofpacket;                                          // dma_0_write_master_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                             // router_003:src_valid -> cmd_demux_003:sink_valid
	wire  [155:0] router_003_src_data;                                                              // router_003:src_data -> cmd_demux_003:sink_data
	wire          router_003_src_ready;                                                             // cmd_demux_003:sink_ready -> router_003:src_ready
	wire    [4:0] router_003_src_channel;                                                           // router_003:src_channel -> cmd_demux_003:sink_channel
	wire          router_003_src_startofpacket;                                                     // router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          router_003_src_endofpacket;                                                       // router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          dma_0_read_master_agent_cp_valid;                                                 // dma_0_read_master_agent:cp_valid -> router_004:sink_valid
	wire  [155:0] dma_0_read_master_agent_cp_data;                                                  // dma_0_read_master_agent:cp_data -> router_004:sink_data
	wire          dma_0_read_master_agent_cp_ready;                                                 // router_004:sink_ready -> dma_0_read_master_agent:cp_ready
	wire          dma_0_read_master_agent_cp_startofpacket;                                         // dma_0_read_master_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire          dma_0_read_master_agent_cp_endofpacket;                                           // dma_0_read_master_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                             // router_004:src_valid -> cmd_demux_004:sink_valid
	wire  [155:0] router_004_src_data;                                                              // router_004:src_data -> cmd_demux_004:sink_data
	wire          router_004_src_ready;                                                             // cmd_demux_004:sink_ready -> router_004:src_ready
	wire    [4:0] router_004_src_channel;                                                           // router_004:src_channel -> cmd_demux_004:sink_channel
	wire          router_004_src_startofpacket;                                                     // router_004:src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          router_004_src_endofpacket;                                                       // router_004:src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          mem_if_ddr3_emif_0_avl_agent_rp_valid;                                            // mem_if_ddr3_emif_0_avl_agent:rp_valid -> router_005:sink_valid
	wire  [155:0] mem_if_ddr3_emif_0_avl_agent_rp_data;                                             // mem_if_ddr3_emif_0_avl_agent:rp_data -> router_005:sink_data
	wire          mem_if_ddr3_emif_0_avl_agent_rp_ready;                                            // router_005:sink_ready -> mem_if_ddr3_emif_0_avl_agent:rp_ready
	wire          mem_if_ddr3_emif_0_avl_agent_rp_startofpacket;                                    // mem_if_ddr3_emif_0_avl_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          mem_if_ddr3_emif_0_avl_agent_rp_endofpacket;                                      // mem_if_ddr3_emif_0_avl_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                             // router_005:src_valid -> rsp_demux:sink_valid
	wire  [155:0] router_005_src_data;                                                              // router_005:src_data -> rsp_demux:sink_data
	wire          router_005_src_ready;                                                             // rsp_demux:sink_ready -> router_005:src_ready
	wire    [4:0] router_005_src_channel;                                                           // router_005:src_channel -> rsp_demux:sink_channel
	wire          router_005_src_startofpacket;                                                     // router_005:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_005_src_endofpacket;                                                       // router_005:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          dma_0_control_port_slave_agent_rp_valid;                                          // dma_0_control_port_slave_agent:rp_valid -> router_006:sink_valid
	wire  [119:0] dma_0_control_port_slave_agent_rp_data;                                           // dma_0_control_port_slave_agent:rp_data -> router_006:sink_data
	wire          dma_0_control_port_slave_agent_rp_ready;                                          // router_006:sink_ready -> dma_0_control_port_slave_agent:rp_ready
	wire          dma_0_control_port_slave_agent_rp_startofpacket;                                  // dma_0_control_port_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          dma_0_control_port_slave_agent_rp_endofpacket;                                    // dma_0_control_port_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                             // router_006:src_valid -> rsp_demux_001:sink_valid
	wire  [119:0] router_006_src_data;                                                              // router_006:src_data -> rsp_demux_001:sink_data
	wire          router_006_src_ready;                                                             // rsp_demux_001:sink_ready -> router_006:src_ready
	wire    [4:0] router_006_src_channel;                                                           // router_006:src_channel -> rsp_demux_001:sink_channel
	wire          router_006_src_startofpacket;                                                     // router_006:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_006_src_endofpacket;                                                       // router_006:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rp_valid;                                        // sysid_qsys_0_control_slave_agent:rp_valid -> router_007:sink_valid
	wire  [119:0] sysid_qsys_0_control_slave_agent_rp_data;                                         // sysid_qsys_0_control_slave_agent:rp_data -> router_007:sink_data
	wire          sysid_qsys_0_control_slave_agent_rp_ready;                                        // router_007:sink_ready -> sysid_qsys_0_control_slave_agent:rp_ready
	wire          sysid_qsys_0_control_slave_agent_rp_startofpacket;                                // sysid_qsys_0_control_slave_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rp_endofpacket;                                  // sysid_qsys_0_control_slave_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                             // router_007:src_valid -> rsp_demux_002:sink_valid
	wire  [119:0] router_007_src_data;                                                              // router_007:src_data -> rsp_demux_002:sink_data
	wire          router_007_src_ready;                                                             // rsp_demux_002:sink_ready -> router_007:src_ready
	wire    [4:0] router_007_src_channel;                                                           // router_007:src_channel -> rsp_demux_002:sink_channel
	wire          router_007_src_startofpacket;                                                     // router_007:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_007_src_endofpacket;                                                       // router_007:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          pio_0_s1_agent_rp_valid;                                                          // pio_0_s1_agent:rp_valid -> router_008:sink_valid
	wire  [119:0] pio_0_s1_agent_rp_data;                                                           // pio_0_s1_agent:rp_data -> router_008:sink_data
	wire          pio_0_s1_agent_rp_ready;                                                          // router_008:sink_ready -> pio_0_s1_agent:rp_ready
	wire          pio_0_s1_agent_rp_startofpacket;                                                  // pio_0_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          pio_0_s1_agent_rp_endofpacket;                                                    // pio_0_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                             // router_008:src_valid -> rsp_demux_003:sink_valid
	wire  [119:0] router_008_src_data;                                                              // router_008:src_data -> rsp_demux_003:sink_data
	wire          router_008_src_ready;                                                             // rsp_demux_003:sink_ready -> router_008:src_ready
	wire    [4:0] router_008_src_channel;                                                           // router_008:src_channel -> rsp_demux_003:sink_channel
	wire          router_008_src_startofpacket;                                                     // router_008:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_008_src_endofpacket;                                                       // router_008:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          onchip_memory2_0_s1_agent_rp_valid;                                               // onchip_memory2_0_s1_agent:rp_valid -> router_009:sink_valid
	wire   [92:0] onchip_memory2_0_s1_agent_rp_data;                                                // onchip_memory2_0_s1_agent:rp_data -> router_009:sink_data
	wire          onchip_memory2_0_s1_agent_rp_ready;                                               // router_009:sink_ready -> onchip_memory2_0_s1_agent:rp_ready
	wire          onchip_memory2_0_s1_agent_rp_startofpacket;                                       // onchip_memory2_0_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rp_endofpacket;                                         // onchip_memory2_0_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                             // router_009:src_valid -> rsp_demux_004:sink_valid
	wire   [92:0] router_009_src_data;                                                              // router_009:src_data -> rsp_demux_004:sink_data
	wire          router_009_src_ready;                                                             // rsp_demux_004:sink_ready -> router_009:src_ready
	wire    [4:0] router_009_src_channel;                                                           // router_009:src_channel -> rsp_demux_004:sink_channel
	wire          router_009_src_startofpacket;                                                     // router_009:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_009_src_endofpacket;                                                       // router_009:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_src_valid;                                                                 // router:src_valid -> mm_master_bfm_0_m0_limiter:cmd_sink_valid
	wire  [119:0] router_src_data;                                                                  // router:src_data -> mm_master_bfm_0_m0_limiter:cmd_sink_data
	wire          router_src_ready;                                                                 // mm_master_bfm_0_m0_limiter:cmd_sink_ready -> router:src_ready
	wire    [4:0] router_src_channel;                                                               // router:src_channel -> mm_master_bfm_0_m0_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                         // router:src_startofpacket -> mm_master_bfm_0_m0_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                           // router:src_endofpacket -> mm_master_bfm_0_m0_limiter:cmd_sink_endofpacket
	wire  [119:0] mm_master_bfm_0_m0_limiter_cmd_src_data;                                          // mm_master_bfm_0_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          mm_master_bfm_0_m0_limiter_cmd_src_ready;                                         // cmd_demux:sink_ready -> mm_master_bfm_0_m0_limiter:cmd_src_ready
	wire    [4:0] mm_master_bfm_0_m0_limiter_cmd_src_channel;                                       // mm_master_bfm_0_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          mm_master_bfm_0_m0_limiter_cmd_src_startofpacket;                                 // mm_master_bfm_0_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          mm_master_bfm_0_m0_limiter_cmd_src_endofpacket;                                   // mm_master_bfm_0_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                // rsp_mux:src_valid -> mm_master_bfm_0_m0_limiter:rsp_sink_valid
	wire  [119:0] rsp_mux_src_data;                                                                 // rsp_mux:src_data -> mm_master_bfm_0_m0_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                // mm_master_bfm_0_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [4:0] rsp_mux_src_channel;                                                              // rsp_mux:src_channel -> mm_master_bfm_0_m0_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                        // rsp_mux:src_startofpacket -> mm_master_bfm_0_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                          // rsp_mux:src_endofpacket -> mm_master_bfm_0_m0_limiter:rsp_sink_endofpacket
	wire          mm_master_bfm_0_m0_limiter_rsp_src_valid;                                         // mm_master_bfm_0_m0_limiter:rsp_src_valid -> mm_master_bfm_0_m0_agent:rp_valid
	wire  [119:0] mm_master_bfm_0_m0_limiter_rsp_src_data;                                          // mm_master_bfm_0_m0_limiter:rsp_src_data -> mm_master_bfm_0_m0_agent:rp_data
	wire          mm_master_bfm_0_m0_limiter_rsp_src_ready;                                         // mm_master_bfm_0_m0_agent:rp_ready -> mm_master_bfm_0_m0_limiter:rsp_src_ready
	wire    [4:0] mm_master_bfm_0_m0_limiter_rsp_src_channel;                                       // mm_master_bfm_0_m0_limiter:rsp_src_channel -> mm_master_bfm_0_m0_agent:rp_channel
	wire          mm_master_bfm_0_m0_limiter_rsp_src_startofpacket;                                 // mm_master_bfm_0_m0_limiter:rsp_src_startofpacket -> mm_master_bfm_0_m0_agent:rp_startofpacket
	wire          mm_master_bfm_0_m0_limiter_rsp_src_endofpacket;                                   // mm_master_bfm_0_m0_limiter:rsp_src_endofpacket -> mm_master_bfm_0_m0_agent:rp_endofpacket
	wire          router_001_src_valid;                                                             // router_001:src_valid -> mm_bridge_0_m0_limiter:cmd_sink_valid
	wire  [119:0] router_001_src_data;                                                              // router_001:src_data -> mm_bridge_0_m0_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                             // mm_bridge_0_m0_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [4:0] router_001_src_channel;                                                           // router_001:src_channel -> mm_bridge_0_m0_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                     // router_001:src_startofpacket -> mm_bridge_0_m0_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                       // router_001:src_endofpacket -> mm_bridge_0_m0_limiter:cmd_sink_endofpacket
	wire  [119:0] mm_bridge_0_m0_limiter_cmd_src_data;                                              // mm_bridge_0_m0_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          mm_bridge_0_m0_limiter_cmd_src_ready;                                             // cmd_demux_001:sink_ready -> mm_bridge_0_m0_limiter:cmd_src_ready
	wire    [4:0] mm_bridge_0_m0_limiter_cmd_src_channel;                                           // mm_bridge_0_m0_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          mm_bridge_0_m0_limiter_cmd_src_startofpacket;                                     // mm_bridge_0_m0_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          mm_bridge_0_m0_limiter_cmd_src_endofpacket;                                       // mm_bridge_0_m0_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                            // rsp_mux_001:src_valid -> mm_bridge_0_m0_limiter:rsp_sink_valid
	wire  [119:0] rsp_mux_001_src_data;                                                             // rsp_mux_001:src_data -> mm_bridge_0_m0_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                            // mm_bridge_0_m0_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [4:0] rsp_mux_001_src_channel;                                                          // rsp_mux_001:src_channel -> mm_bridge_0_m0_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                    // rsp_mux_001:src_startofpacket -> mm_bridge_0_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                      // rsp_mux_001:src_endofpacket -> mm_bridge_0_m0_limiter:rsp_sink_endofpacket
	wire          mm_bridge_0_m0_limiter_rsp_src_valid;                                             // mm_bridge_0_m0_limiter:rsp_src_valid -> mm_bridge_0_m0_agent:rp_valid
	wire  [119:0] mm_bridge_0_m0_limiter_rsp_src_data;                                              // mm_bridge_0_m0_limiter:rsp_src_data -> mm_bridge_0_m0_agent:rp_data
	wire          mm_bridge_0_m0_limiter_rsp_src_ready;                                             // mm_bridge_0_m0_agent:rp_ready -> mm_bridge_0_m0_limiter:rsp_src_ready
	wire    [4:0] mm_bridge_0_m0_limiter_rsp_src_channel;                                           // mm_bridge_0_m0_limiter:rsp_src_channel -> mm_bridge_0_m0_agent:rp_channel
	wire          mm_bridge_0_m0_limiter_rsp_src_startofpacket;                                     // mm_bridge_0_m0_limiter:rsp_src_startofpacket -> mm_bridge_0_m0_agent:rp_startofpacket
	wire          mm_bridge_0_m0_limiter_rsp_src_endofpacket;                                       // mm_bridge_0_m0_limiter:rsp_src_endofpacket -> mm_bridge_0_m0_agent:rp_endofpacket
	wire          router_002_src_valid;                                                             // router_002:src_valid -> master_0_master_limiter:cmd_sink_valid
	wire  [119:0] router_002_src_data;                                                              // router_002:src_data -> master_0_master_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                             // master_0_master_limiter:cmd_sink_ready -> router_002:src_ready
	wire    [4:0] router_002_src_channel;                                                           // router_002:src_channel -> master_0_master_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                                     // router_002:src_startofpacket -> master_0_master_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                       // router_002:src_endofpacket -> master_0_master_limiter:cmd_sink_endofpacket
	wire  [119:0] master_0_master_limiter_cmd_src_data;                                             // master_0_master_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire          master_0_master_limiter_cmd_src_ready;                                            // cmd_demux_002:sink_ready -> master_0_master_limiter:cmd_src_ready
	wire    [4:0] master_0_master_limiter_cmd_src_channel;                                          // master_0_master_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          master_0_master_limiter_cmd_src_startofpacket;                                    // master_0_master_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          master_0_master_limiter_cmd_src_endofpacket;                                      // master_0_master_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                            // rsp_mux_002:src_valid -> master_0_master_limiter:rsp_sink_valid
	wire  [119:0] rsp_mux_002_src_data;                                                             // rsp_mux_002:src_data -> master_0_master_limiter:rsp_sink_data
	wire          rsp_mux_002_src_ready;                                                            // master_0_master_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire    [4:0] rsp_mux_002_src_channel;                                                          // rsp_mux_002:src_channel -> master_0_master_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_startofpacket;                                                    // rsp_mux_002:src_startofpacket -> master_0_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                      // rsp_mux_002:src_endofpacket -> master_0_master_limiter:rsp_sink_endofpacket
	wire          master_0_master_limiter_rsp_src_valid;                                            // master_0_master_limiter:rsp_src_valid -> master_0_master_agent:rp_valid
	wire  [119:0] master_0_master_limiter_rsp_src_data;                                             // master_0_master_limiter:rsp_src_data -> master_0_master_agent:rp_data
	wire          master_0_master_limiter_rsp_src_ready;                                            // master_0_master_agent:rp_ready -> master_0_master_limiter:rsp_src_ready
	wire    [4:0] master_0_master_limiter_rsp_src_channel;                                          // master_0_master_limiter:rsp_src_channel -> master_0_master_agent:rp_channel
	wire          master_0_master_limiter_rsp_src_startofpacket;                                    // master_0_master_limiter:rsp_src_startofpacket -> master_0_master_agent:rp_startofpacket
	wire          master_0_master_limiter_rsp_src_endofpacket;                                      // master_0_master_limiter:rsp_src_endofpacket -> master_0_master_agent:rp_endofpacket
	wire          cmd_mux_001_src_valid;                                                            // cmd_mux_001:src_valid -> dma_0_control_port_slave_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_001_src_data;                                                             // cmd_mux_001:src_data -> dma_0_control_port_slave_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                            // dma_0_control_port_slave_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire    [4:0] cmd_mux_001_src_channel;                                                          // cmd_mux_001:src_channel -> dma_0_control_port_slave_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                                    // cmd_mux_001:src_startofpacket -> dma_0_control_port_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                      // cmd_mux_001:src_endofpacket -> dma_0_control_port_slave_burst_adapter:sink0_endofpacket
	wire          dma_0_control_port_slave_burst_adapter_source0_valid;                             // dma_0_control_port_slave_burst_adapter:source0_valid -> dma_0_control_port_slave_agent:cp_valid
	wire  [119:0] dma_0_control_port_slave_burst_adapter_source0_data;                              // dma_0_control_port_slave_burst_adapter:source0_data -> dma_0_control_port_slave_agent:cp_data
	wire          dma_0_control_port_slave_burst_adapter_source0_ready;                             // dma_0_control_port_slave_agent:cp_ready -> dma_0_control_port_slave_burst_adapter:source0_ready
	wire    [4:0] dma_0_control_port_slave_burst_adapter_source0_channel;                           // dma_0_control_port_slave_burst_adapter:source0_channel -> dma_0_control_port_slave_agent:cp_channel
	wire          dma_0_control_port_slave_burst_adapter_source0_startofpacket;                     // dma_0_control_port_slave_burst_adapter:source0_startofpacket -> dma_0_control_port_slave_agent:cp_startofpacket
	wire          dma_0_control_port_slave_burst_adapter_source0_endofpacket;                       // dma_0_control_port_slave_burst_adapter:source0_endofpacket -> dma_0_control_port_slave_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                            // cmd_mux_002:src_valid -> sysid_qsys_0_control_slave_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_002_src_data;                                                             // cmd_mux_002:src_data -> sysid_qsys_0_control_slave_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                            // sysid_qsys_0_control_slave_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire    [4:0] cmd_mux_002_src_channel;                                                          // cmd_mux_002:src_channel -> sysid_qsys_0_control_slave_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                                    // cmd_mux_002:src_startofpacket -> sysid_qsys_0_control_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                      // cmd_mux_002:src_endofpacket -> sysid_qsys_0_control_slave_burst_adapter:sink0_endofpacket
	wire          sysid_qsys_0_control_slave_burst_adapter_source0_valid;                           // sysid_qsys_0_control_slave_burst_adapter:source0_valid -> sysid_qsys_0_control_slave_agent:cp_valid
	wire  [119:0] sysid_qsys_0_control_slave_burst_adapter_source0_data;                            // sysid_qsys_0_control_slave_burst_adapter:source0_data -> sysid_qsys_0_control_slave_agent:cp_data
	wire          sysid_qsys_0_control_slave_burst_adapter_source0_ready;                           // sysid_qsys_0_control_slave_agent:cp_ready -> sysid_qsys_0_control_slave_burst_adapter:source0_ready
	wire    [4:0] sysid_qsys_0_control_slave_burst_adapter_source0_channel;                         // sysid_qsys_0_control_slave_burst_adapter:source0_channel -> sysid_qsys_0_control_slave_agent:cp_channel
	wire          sysid_qsys_0_control_slave_burst_adapter_source0_startofpacket;                   // sysid_qsys_0_control_slave_burst_adapter:source0_startofpacket -> sysid_qsys_0_control_slave_agent:cp_startofpacket
	wire          sysid_qsys_0_control_slave_burst_adapter_source0_endofpacket;                     // sysid_qsys_0_control_slave_burst_adapter:source0_endofpacket -> sysid_qsys_0_control_slave_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                            // cmd_mux_003:src_valid -> pio_0_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_003_src_data;                                                             // cmd_mux_003:src_data -> pio_0_s1_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                                            // pio_0_s1_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire    [4:0] cmd_mux_003_src_channel;                                                          // cmd_mux_003:src_channel -> pio_0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                                    // cmd_mux_003:src_startofpacket -> pio_0_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                      // cmd_mux_003:src_endofpacket -> pio_0_s1_burst_adapter:sink0_endofpacket
	wire          pio_0_s1_burst_adapter_source0_valid;                                             // pio_0_s1_burst_adapter:source0_valid -> pio_0_s1_agent:cp_valid
	wire  [119:0] pio_0_s1_burst_adapter_source0_data;                                              // pio_0_s1_burst_adapter:source0_data -> pio_0_s1_agent:cp_data
	wire          pio_0_s1_burst_adapter_source0_ready;                                             // pio_0_s1_agent:cp_ready -> pio_0_s1_burst_adapter:source0_ready
	wire    [4:0] pio_0_s1_burst_adapter_source0_channel;                                           // pio_0_s1_burst_adapter:source0_channel -> pio_0_s1_agent:cp_channel
	wire          pio_0_s1_burst_adapter_source0_startofpacket;                                     // pio_0_s1_burst_adapter:source0_startofpacket -> pio_0_s1_agent:cp_startofpacket
	wire          pio_0_s1_burst_adapter_source0_endofpacket;                                       // pio_0_s1_burst_adapter:source0_endofpacket -> pio_0_s1_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                                            // cmd_mux_004:src_valid -> onchip_memory2_0_s1_burst_adapter:sink0_valid
	wire   [92:0] cmd_mux_004_src_data;                                                             // cmd_mux_004:src_data -> onchip_memory2_0_s1_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                                            // onchip_memory2_0_s1_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire    [4:0] cmd_mux_004_src_channel;                                                          // cmd_mux_004:src_channel -> onchip_memory2_0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                                    // cmd_mux_004:src_startofpacket -> onchip_memory2_0_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                      // cmd_mux_004:src_endofpacket -> onchip_memory2_0_s1_burst_adapter:sink0_endofpacket
	wire          onchip_memory2_0_s1_burst_adapter_source0_valid;                                  // onchip_memory2_0_s1_burst_adapter:source0_valid -> onchip_memory2_0_s1_agent:cp_valid
	wire   [92:0] onchip_memory2_0_s1_burst_adapter_source0_data;                                   // onchip_memory2_0_s1_burst_adapter:source0_data -> onchip_memory2_0_s1_agent:cp_data
	wire          onchip_memory2_0_s1_burst_adapter_source0_ready;                                  // onchip_memory2_0_s1_agent:cp_ready -> onchip_memory2_0_s1_burst_adapter:source0_ready
	wire    [4:0] onchip_memory2_0_s1_burst_adapter_source0_channel;                                // onchip_memory2_0_s1_burst_adapter:source0_channel -> onchip_memory2_0_s1_agent:cp_channel
	wire          onchip_memory2_0_s1_burst_adapter_source0_startofpacket;                          // onchip_memory2_0_s1_burst_adapter:source0_startofpacket -> onchip_memory2_0_s1_agent:cp_startofpacket
	wire          onchip_memory2_0_s1_burst_adapter_source0_endofpacket;                            // onchip_memory2_0_s1_burst_adapter:source0_endofpacket -> onchip_memory2_0_s1_agent:cp_endofpacket
	wire          cmd_demux_src1_valid;                                                             // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [119:0] cmd_demux_src1_data;                                                              // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                             // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [4:0] cmd_demux_src1_channel;                                                           // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                     // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                       // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                             // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [119:0] cmd_demux_src2_data;                                                              // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                             // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [4:0] cmd_demux_src2_channel;                                                           // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                     // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                       // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                             // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [119:0] cmd_demux_src3_data;                                                              // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                             // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire    [4:0] cmd_demux_src3_channel;                                                           // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                     // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                       // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_001_src1_valid;                                                         // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [119:0] cmd_demux_001_src1_data;                                                          // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                                         // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire    [4:0] cmd_demux_001_src1_channel;                                                       // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                 // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                   // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                         // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [119:0] cmd_demux_001_src2_data;                                                          // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                                         // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire    [4:0] cmd_demux_001_src2_channel;                                                       // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                                 // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                   // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                         // cmd_demux_001:src3_valid -> cmd_mux_003:sink1_valid
	wire  [119:0] cmd_demux_001_src3_data;                                                          // cmd_demux_001:src3_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src3_ready;                                                         // cmd_mux_003:sink1_ready -> cmd_demux_001:src3_ready
	wire    [4:0] cmd_demux_001_src3_channel;                                                       // cmd_demux_001:src3_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                                 // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                   // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_002_src1_valid;                                                         // cmd_demux_002:src1_valid -> cmd_mux_001:sink2_valid
	wire  [119:0] cmd_demux_002_src1_data;                                                          // cmd_demux_002:src1_data -> cmd_mux_001:sink2_data
	wire          cmd_demux_002_src1_ready;                                                         // cmd_mux_001:sink2_ready -> cmd_demux_002:src1_ready
	wire    [4:0] cmd_demux_002_src1_channel;                                                       // cmd_demux_002:src1_channel -> cmd_mux_001:sink2_channel
	wire          cmd_demux_002_src1_startofpacket;                                                 // cmd_demux_002:src1_startofpacket -> cmd_mux_001:sink2_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                   // cmd_demux_002:src1_endofpacket -> cmd_mux_001:sink2_endofpacket
	wire          cmd_demux_002_src2_valid;                                                         // cmd_demux_002:src2_valid -> cmd_mux_002:sink2_valid
	wire  [119:0] cmd_demux_002_src2_data;                                                          // cmd_demux_002:src2_data -> cmd_mux_002:sink2_data
	wire          cmd_demux_002_src2_ready;                                                         // cmd_mux_002:sink2_ready -> cmd_demux_002:src2_ready
	wire    [4:0] cmd_demux_002_src2_channel;                                                       // cmd_demux_002:src2_channel -> cmd_mux_002:sink2_channel
	wire          cmd_demux_002_src2_startofpacket;                                                 // cmd_demux_002:src2_startofpacket -> cmd_mux_002:sink2_startofpacket
	wire          cmd_demux_002_src2_endofpacket;                                                   // cmd_demux_002:src2_endofpacket -> cmd_mux_002:sink2_endofpacket
	wire          cmd_demux_002_src3_valid;                                                         // cmd_demux_002:src3_valid -> cmd_mux_003:sink2_valid
	wire  [119:0] cmd_demux_002_src3_data;                                                          // cmd_demux_002:src3_data -> cmd_mux_003:sink2_data
	wire          cmd_demux_002_src3_ready;                                                         // cmd_mux_003:sink2_ready -> cmd_demux_002:src3_ready
	wire    [4:0] cmd_demux_002_src3_channel;                                                       // cmd_demux_002:src3_channel -> cmd_mux_003:sink2_channel
	wire          cmd_demux_002_src3_startofpacket;                                                 // cmd_demux_002:src3_startofpacket -> cmd_mux_003:sink2_startofpacket
	wire          cmd_demux_002_src3_endofpacket;                                                   // cmd_demux_002:src3_endofpacket -> cmd_mux_003:sink2_endofpacket
	wire          cmd_demux_003_src0_valid;                                                         // cmd_demux_003:src0_valid -> cmd_mux:sink3_valid
	wire  [155:0] cmd_demux_003_src0_data;                                                          // cmd_demux_003:src0_data -> cmd_mux:sink3_data
	wire          cmd_demux_003_src0_ready;                                                         // cmd_mux:sink3_ready -> cmd_demux_003:src0_ready
	wire    [4:0] cmd_demux_003_src0_channel;                                                       // cmd_demux_003:src0_channel -> cmd_mux:sink3_channel
	wire          cmd_demux_003_src0_startofpacket;                                                 // cmd_demux_003:src0_startofpacket -> cmd_mux:sink3_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                   // cmd_demux_003:src0_endofpacket -> cmd_mux:sink3_endofpacket
	wire          rsp_demux_src3_valid;                                                             // rsp_demux:src3_valid -> rsp_mux_003:sink0_valid
	wire  [155:0] rsp_demux_src3_data;                                                              // rsp_demux:src3_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_src3_ready;                                                             // rsp_mux_003:sink0_ready -> rsp_demux:src3_ready
	wire    [4:0] rsp_demux_src3_channel;                                                           // rsp_demux:src3_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_src3_startofpacket;                                                     // rsp_demux:src3_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_src3_endofpacket;                                                       // rsp_demux:src3_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                         // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [119:0] rsp_demux_001_src0_data;                                                          // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                         // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [4:0] rsp_demux_001_src0_channel;                                                       // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                 // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                   // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                         // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [119:0] rsp_demux_001_src1_data;                                                          // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                                         // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire    [4:0] rsp_demux_001_src1_channel;                                                       // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                                 // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                   // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_001_src2_valid;                                                         // rsp_demux_001:src2_valid -> rsp_mux_002:sink1_valid
	wire  [119:0] rsp_demux_001_src2_data;                                                          // rsp_demux_001:src2_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_001_src2_ready;                                                         // rsp_mux_002:sink1_ready -> rsp_demux_001:src2_ready
	wire    [4:0] rsp_demux_001_src2_channel;                                                       // rsp_demux_001:src2_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_001_src2_startofpacket;                                                 // rsp_demux_001:src2_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_001_src2_endofpacket;                                                   // rsp_demux_001:src2_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                         // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [119:0] rsp_demux_002_src0_data;                                                          // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                         // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [4:0] rsp_demux_002_src0_channel;                                                       // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                 // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                   // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                         // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [119:0] rsp_demux_002_src1_data;                                                          // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                                         // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire    [4:0] rsp_demux_002_src1_channel;                                                       // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                                                 // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                   // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_002_src2_valid;                                                         // rsp_demux_002:src2_valid -> rsp_mux_002:sink2_valid
	wire  [119:0] rsp_demux_002_src2_data;                                                          // rsp_demux_002:src2_data -> rsp_mux_002:sink2_data
	wire          rsp_demux_002_src2_ready;                                                         // rsp_mux_002:sink2_ready -> rsp_demux_002:src2_ready
	wire    [4:0] rsp_demux_002_src2_channel;                                                       // rsp_demux_002:src2_channel -> rsp_mux_002:sink2_channel
	wire          rsp_demux_002_src2_startofpacket;                                                 // rsp_demux_002:src2_startofpacket -> rsp_mux_002:sink2_startofpacket
	wire          rsp_demux_002_src2_endofpacket;                                                   // rsp_demux_002:src2_endofpacket -> rsp_mux_002:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                         // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [119:0] rsp_demux_003_src0_data;                                                          // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                         // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire    [4:0] rsp_demux_003_src0_channel;                                                       // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                 // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                   // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                         // rsp_demux_003:src1_valid -> rsp_mux_001:sink3_valid
	wire  [119:0] rsp_demux_003_src1_data;                                                          // rsp_demux_003:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src1_ready;                                                         // rsp_mux_001:sink3_ready -> rsp_demux_003:src1_ready
	wire    [4:0] rsp_demux_003_src1_channel;                                                       // rsp_demux_003:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src1_startofpacket;                                                 // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                   // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_003_src2_valid;                                                         // rsp_demux_003:src2_valid -> rsp_mux_002:sink3_valid
	wire  [119:0] rsp_demux_003_src2_data;                                                          // rsp_demux_003:src2_data -> rsp_mux_002:sink3_data
	wire          rsp_demux_003_src2_ready;                                                         // rsp_mux_002:sink3_ready -> rsp_demux_003:src2_ready
	wire    [4:0] rsp_demux_003_src2_channel;                                                       // rsp_demux_003:src2_channel -> rsp_mux_002:sink3_channel
	wire          rsp_demux_003_src2_startofpacket;                                                 // rsp_demux_003:src2_startofpacket -> rsp_mux_002:sink3_startofpacket
	wire          rsp_demux_003_src2_endofpacket;                                                   // rsp_demux_003:src2_endofpacket -> rsp_mux_002:sink3_endofpacket
	wire          cmd_demux_src0_valid;                                                             // cmd_demux:src0_valid -> mm_master_bfm_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:in_valid
	wire  [119:0] cmd_demux_src0_data;                                                              // cmd_demux:src0_data -> mm_master_bfm_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:in_data
	wire          cmd_demux_src0_ready;                                                             // mm_master_bfm_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:in_ready -> cmd_demux:src0_ready
	wire    [4:0] cmd_demux_src0_channel;                                                           // cmd_demux:src0_channel -> mm_master_bfm_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:in_channel
	wire          cmd_demux_src0_startofpacket;                                                     // cmd_demux:src0_startofpacket -> mm_master_bfm_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                       // cmd_demux:src0_endofpacket -> mm_master_bfm_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:in_endofpacket
	wire          mm_master_bfm_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_valid;         // mm_master_bfm_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:out_valid -> cmd_mux:sink0_valid
	wire  [155:0] mm_master_bfm_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_data;          // mm_master_bfm_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:out_data -> cmd_mux:sink0_data
	wire          mm_master_bfm_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_ready;         // cmd_mux:sink0_ready -> mm_master_bfm_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:out_ready
	wire    [4:0] mm_master_bfm_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_channel;       // mm_master_bfm_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:out_channel -> cmd_mux:sink0_channel
	wire          mm_master_bfm_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_startofpacket; // mm_master_bfm_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          mm_master_bfm_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_endofpacket;   // mm_master_bfm_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                             // cmd_demux:src4_valid -> mm_master_bfm_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter:in_valid
	wire  [119:0] cmd_demux_src4_data;                                                              // cmd_demux:src4_data -> mm_master_bfm_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter:in_data
	wire          cmd_demux_src4_ready;                                                             // mm_master_bfm_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter:in_ready -> cmd_demux:src4_ready
	wire    [4:0] cmd_demux_src4_channel;                                                           // cmd_demux:src4_channel -> mm_master_bfm_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src4_startofpacket;                                                     // cmd_demux:src4_startofpacket -> mm_master_bfm_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                       // cmd_demux:src4_endofpacket -> mm_master_bfm_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter:in_endofpacket
	wire          mm_master_bfm_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_valid;            // mm_master_bfm_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter:out_valid -> cmd_mux_004:sink0_valid
	wire   [92:0] mm_master_bfm_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_data;             // mm_master_bfm_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter:out_data -> cmd_mux_004:sink0_data
	wire          mm_master_bfm_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_ready;            // cmd_mux_004:sink0_ready -> mm_master_bfm_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter:out_ready
	wire    [4:0] mm_master_bfm_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_channel;          // mm_master_bfm_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter:out_channel -> cmd_mux_004:sink0_channel
	wire          mm_master_bfm_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket;    // mm_master_bfm_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          mm_master_bfm_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket;      // mm_master_bfm_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                         // cmd_demux_001:src0_valid -> mm_bridge_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:in_valid
	wire  [119:0] cmd_demux_001_src0_data;                                                          // cmd_demux_001:src0_data -> mm_bridge_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:in_data
	wire          cmd_demux_001_src0_ready;                                                         // mm_bridge_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:in_ready -> cmd_demux_001:src0_ready
	wire    [4:0] cmd_demux_001_src0_channel;                                                       // cmd_demux_001:src0_channel -> mm_bridge_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                                 // cmd_demux_001:src0_startofpacket -> mm_bridge_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                   // cmd_demux_001:src0_endofpacket -> mm_bridge_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:in_endofpacket
	wire          mm_bridge_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_valid;             // mm_bridge_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:out_valid -> cmd_mux:sink1_valid
	wire  [155:0] mm_bridge_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_data;              // mm_bridge_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:out_data -> cmd_mux:sink1_data
	wire          mm_bridge_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_ready;             // cmd_mux:sink1_ready -> mm_bridge_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:out_ready
	wire    [4:0] mm_bridge_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_channel;           // mm_bridge_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:out_channel -> cmd_mux:sink1_channel
	wire          mm_bridge_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_startofpacket;     // mm_bridge_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          mm_bridge_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_endofpacket;       // mm_bridge_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                                         // cmd_demux_001:src4_valid -> mm_bridge_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter:in_valid
	wire  [119:0] cmd_demux_001_src4_data;                                                          // cmd_demux_001:src4_data -> mm_bridge_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter:in_data
	wire          cmd_demux_001_src4_ready;                                                         // mm_bridge_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter:in_ready -> cmd_demux_001:src4_ready
	wire    [4:0] cmd_demux_001_src4_channel;                                                       // cmd_demux_001:src4_channel -> mm_bridge_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src4_startofpacket;                                                 // cmd_demux_001:src4_startofpacket -> mm_bridge_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                                   // cmd_demux_001:src4_endofpacket -> mm_bridge_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter:in_endofpacket
	wire          mm_bridge_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_valid;                // mm_bridge_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter:out_valid -> cmd_mux_004:sink1_valid
	wire   [92:0] mm_bridge_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_data;                 // mm_bridge_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter:out_data -> cmd_mux_004:sink1_data
	wire          mm_bridge_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_ready;                // cmd_mux_004:sink1_ready -> mm_bridge_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter:out_ready
	wire    [4:0] mm_bridge_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_channel;              // mm_bridge_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter:out_channel -> cmd_mux_004:sink1_channel
	wire          mm_bridge_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket;        // mm_bridge_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          mm_bridge_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket;          // mm_bridge_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                         // cmd_demux_002:src0_valid -> master_0_master_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:in_valid
	wire  [119:0] cmd_demux_002_src0_data;                                                          // cmd_demux_002:src0_data -> master_0_master_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:in_data
	wire          cmd_demux_002_src0_ready;                                                         // master_0_master_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:in_ready -> cmd_demux_002:src0_ready
	wire    [4:0] cmd_demux_002_src0_channel;                                                       // cmd_demux_002:src0_channel -> master_0_master_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src0_startofpacket;                                                 // cmd_demux_002:src0_startofpacket -> master_0_master_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                   // cmd_demux_002:src0_endofpacket -> master_0_master_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:in_endofpacket
	wire          master_0_master_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_valid;            // master_0_master_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:out_valid -> cmd_mux:sink2_valid
	wire  [155:0] master_0_master_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_data;             // master_0_master_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:out_data -> cmd_mux:sink2_data
	wire          master_0_master_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_ready;            // cmd_mux:sink2_ready -> master_0_master_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:out_ready
	wire    [4:0] master_0_master_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_channel;          // master_0_master_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:out_channel -> cmd_mux:sink2_channel
	wire          master_0_master_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_startofpacket;    // master_0_master_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:out_startofpacket -> cmd_mux:sink2_startofpacket
	wire          master_0_master_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_endofpacket;      // master_0_master_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter:out_endofpacket -> cmd_mux:sink2_endofpacket
	wire          cmd_demux_002_src4_valid;                                                         // cmd_demux_002:src4_valid -> master_0_master_to_onchip_memory2_0_s1_cmd_width_adapter:in_valid
	wire  [119:0] cmd_demux_002_src4_data;                                                          // cmd_demux_002:src4_data -> master_0_master_to_onchip_memory2_0_s1_cmd_width_adapter:in_data
	wire          cmd_demux_002_src4_ready;                                                         // master_0_master_to_onchip_memory2_0_s1_cmd_width_adapter:in_ready -> cmd_demux_002:src4_ready
	wire    [4:0] cmd_demux_002_src4_channel;                                                       // cmd_demux_002:src4_channel -> master_0_master_to_onchip_memory2_0_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src4_startofpacket;                                                 // cmd_demux_002:src4_startofpacket -> master_0_master_to_onchip_memory2_0_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_002_src4_endofpacket;                                                   // cmd_demux_002:src4_endofpacket -> master_0_master_to_onchip_memory2_0_s1_cmd_width_adapter:in_endofpacket
	wire          master_0_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_valid;               // master_0_master_to_onchip_memory2_0_s1_cmd_width_adapter:out_valid -> cmd_mux_004:sink2_valid
	wire   [92:0] master_0_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_data;                // master_0_master_to_onchip_memory2_0_s1_cmd_width_adapter:out_data -> cmd_mux_004:sink2_data
	wire          master_0_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_ready;               // cmd_mux_004:sink2_ready -> master_0_master_to_onchip_memory2_0_s1_cmd_width_adapter:out_ready
	wire    [4:0] master_0_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_channel;             // master_0_master_to_onchip_memory2_0_s1_cmd_width_adapter:out_channel -> cmd_mux_004:sink2_channel
	wire          master_0_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket;       // master_0_master_to_onchip_memory2_0_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_004:sink2_startofpacket
	wire          master_0_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket;         // master_0_master_to_onchip_memory2_0_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_004:sink2_endofpacket
	wire          cmd_demux_004_src0_valid;                                                         // cmd_demux_004:src0_valid -> dma_0_read_master_to_onchip_memory2_0_s1_cmd_width_adapter:in_valid
	wire  [155:0] cmd_demux_004_src0_data;                                                          // cmd_demux_004:src0_data -> dma_0_read_master_to_onchip_memory2_0_s1_cmd_width_adapter:in_data
	wire          cmd_demux_004_src0_ready;                                                         // dma_0_read_master_to_onchip_memory2_0_s1_cmd_width_adapter:in_ready -> cmd_demux_004:src0_ready
	wire    [4:0] cmd_demux_004_src0_channel;                                                       // cmd_demux_004:src0_channel -> dma_0_read_master_to_onchip_memory2_0_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_004_src0_startofpacket;                                                 // cmd_demux_004:src0_startofpacket -> dma_0_read_master_to_onchip_memory2_0_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                                   // cmd_demux_004:src0_endofpacket -> dma_0_read_master_to_onchip_memory2_0_s1_cmd_width_adapter:in_endofpacket
	wire          dma_0_read_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_valid;             // dma_0_read_master_to_onchip_memory2_0_s1_cmd_width_adapter:out_valid -> cmd_mux_004:sink3_valid
	wire   [92:0] dma_0_read_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_data;              // dma_0_read_master_to_onchip_memory2_0_s1_cmd_width_adapter:out_data -> cmd_mux_004:sink3_data
	wire          dma_0_read_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_ready;             // cmd_mux_004:sink3_ready -> dma_0_read_master_to_onchip_memory2_0_s1_cmd_width_adapter:out_ready
	wire    [4:0] dma_0_read_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_channel;           // dma_0_read_master_to_onchip_memory2_0_s1_cmd_width_adapter:out_channel -> cmd_mux_004:sink3_channel
	wire          dma_0_read_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket;     // dma_0_read_master_to_onchip_memory2_0_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_004:sink3_startofpacket
	wire          dma_0_read_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket;       // dma_0_read_master_to_onchip_memory2_0_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_004:sink3_endofpacket
	wire          rsp_demux_src0_valid;                                                             // rsp_demux:src0_valid -> mem_if_ddr3_emif_0_avl_to_mm_master_bfm_0_m0_rsp_width_adapter:in_valid
	wire  [155:0] rsp_demux_src0_data;                                                              // rsp_demux:src0_data -> mem_if_ddr3_emif_0_avl_to_mm_master_bfm_0_m0_rsp_width_adapter:in_data
	wire          rsp_demux_src0_ready;                                                             // mem_if_ddr3_emif_0_avl_to_mm_master_bfm_0_m0_rsp_width_adapter:in_ready -> rsp_demux:src0_ready
	wire    [4:0] rsp_demux_src0_channel;                                                           // rsp_demux:src0_channel -> mem_if_ddr3_emif_0_avl_to_mm_master_bfm_0_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_src0_startofpacket;                                                     // rsp_demux:src0_startofpacket -> mem_if_ddr3_emif_0_avl_to_mm_master_bfm_0_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                       // rsp_demux:src0_endofpacket -> mem_if_ddr3_emif_0_avl_to_mm_master_bfm_0_m0_rsp_width_adapter:in_endofpacket
	wire          mem_if_ddr3_emif_0_avl_to_mm_master_bfm_0_m0_rsp_width_adapter_src_valid;         // mem_if_ddr3_emif_0_avl_to_mm_master_bfm_0_m0_rsp_width_adapter:out_valid -> rsp_mux:sink0_valid
	wire  [119:0] mem_if_ddr3_emif_0_avl_to_mm_master_bfm_0_m0_rsp_width_adapter_src_data;          // mem_if_ddr3_emif_0_avl_to_mm_master_bfm_0_m0_rsp_width_adapter:out_data -> rsp_mux:sink0_data
	wire          mem_if_ddr3_emif_0_avl_to_mm_master_bfm_0_m0_rsp_width_adapter_src_ready;         // rsp_mux:sink0_ready -> mem_if_ddr3_emif_0_avl_to_mm_master_bfm_0_m0_rsp_width_adapter:out_ready
	wire    [4:0] mem_if_ddr3_emif_0_avl_to_mm_master_bfm_0_m0_rsp_width_adapter_src_channel;       // mem_if_ddr3_emif_0_avl_to_mm_master_bfm_0_m0_rsp_width_adapter:out_channel -> rsp_mux:sink0_channel
	wire          mem_if_ddr3_emif_0_avl_to_mm_master_bfm_0_m0_rsp_width_adapter_src_startofpacket; // mem_if_ddr3_emif_0_avl_to_mm_master_bfm_0_m0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          mem_if_ddr3_emif_0_avl_to_mm_master_bfm_0_m0_rsp_width_adapter_src_endofpacket;   // mem_if_ddr3_emif_0_avl_to_mm_master_bfm_0_m0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                             // rsp_demux:src1_valid -> mem_if_ddr3_emif_0_avl_to_mm_bridge_0_m0_rsp_width_adapter:in_valid
	wire  [155:0] rsp_demux_src1_data;                                                              // rsp_demux:src1_data -> mem_if_ddr3_emif_0_avl_to_mm_bridge_0_m0_rsp_width_adapter:in_data
	wire          rsp_demux_src1_ready;                                                             // mem_if_ddr3_emif_0_avl_to_mm_bridge_0_m0_rsp_width_adapter:in_ready -> rsp_demux:src1_ready
	wire    [4:0] rsp_demux_src1_channel;                                                           // rsp_demux:src1_channel -> mem_if_ddr3_emif_0_avl_to_mm_bridge_0_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_src1_startofpacket;                                                     // rsp_demux:src1_startofpacket -> mem_if_ddr3_emif_0_avl_to_mm_bridge_0_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                       // rsp_demux:src1_endofpacket -> mem_if_ddr3_emif_0_avl_to_mm_bridge_0_m0_rsp_width_adapter:in_endofpacket
	wire          mem_if_ddr3_emif_0_avl_to_mm_bridge_0_m0_rsp_width_adapter_src_valid;             // mem_if_ddr3_emif_0_avl_to_mm_bridge_0_m0_rsp_width_adapter:out_valid -> rsp_mux_001:sink0_valid
	wire  [119:0] mem_if_ddr3_emif_0_avl_to_mm_bridge_0_m0_rsp_width_adapter_src_data;              // mem_if_ddr3_emif_0_avl_to_mm_bridge_0_m0_rsp_width_adapter:out_data -> rsp_mux_001:sink0_data
	wire          mem_if_ddr3_emif_0_avl_to_mm_bridge_0_m0_rsp_width_adapter_src_ready;             // rsp_mux_001:sink0_ready -> mem_if_ddr3_emif_0_avl_to_mm_bridge_0_m0_rsp_width_adapter:out_ready
	wire    [4:0] mem_if_ddr3_emif_0_avl_to_mm_bridge_0_m0_rsp_width_adapter_src_channel;           // mem_if_ddr3_emif_0_avl_to_mm_bridge_0_m0_rsp_width_adapter:out_channel -> rsp_mux_001:sink0_channel
	wire          mem_if_ddr3_emif_0_avl_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket;     // mem_if_ddr3_emif_0_avl_to_mm_bridge_0_m0_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          mem_if_ddr3_emif_0_avl_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket;       // mem_if_ddr3_emif_0_avl_to_mm_bridge_0_m0_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_src2_valid;                                                             // rsp_demux:src2_valid -> mem_if_ddr3_emif_0_avl_to_master_0_master_rsp_width_adapter:in_valid
	wire  [155:0] rsp_demux_src2_data;                                                              // rsp_demux:src2_data -> mem_if_ddr3_emif_0_avl_to_master_0_master_rsp_width_adapter:in_data
	wire          rsp_demux_src2_ready;                                                             // mem_if_ddr3_emif_0_avl_to_master_0_master_rsp_width_adapter:in_ready -> rsp_demux:src2_ready
	wire    [4:0] rsp_demux_src2_channel;                                                           // rsp_demux:src2_channel -> mem_if_ddr3_emif_0_avl_to_master_0_master_rsp_width_adapter:in_channel
	wire          rsp_demux_src2_startofpacket;                                                     // rsp_demux:src2_startofpacket -> mem_if_ddr3_emif_0_avl_to_master_0_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                       // rsp_demux:src2_endofpacket -> mem_if_ddr3_emif_0_avl_to_master_0_master_rsp_width_adapter:in_endofpacket
	wire          mem_if_ddr3_emif_0_avl_to_master_0_master_rsp_width_adapter_src_valid;            // mem_if_ddr3_emif_0_avl_to_master_0_master_rsp_width_adapter:out_valid -> rsp_mux_002:sink0_valid
	wire  [119:0] mem_if_ddr3_emif_0_avl_to_master_0_master_rsp_width_adapter_src_data;             // mem_if_ddr3_emif_0_avl_to_master_0_master_rsp_width_adapter:out_data -> rsp_mux_002:sink0_data
	wire          mem_if_ddr3_emif_0_avl_to_master_0_master_rsp_width_adapter_src_ready;            // rsp_mux_002:sink0_ready -> mem_if_ddr3_emif_0_avl_to_master_0_master_rsp_width_adapter:out_ready
	wire    [4:0] mem_if_ddr3_emif_0_avl_to_master_0_master_rsp_width_adapter_src_channel;          // mem_if_ddr3_emif_0_avl_to_master_0_master_rsp_width_adapter:out_channel -> rsp_mux_002:sink0_channel
	wire          mem_if_ddr3_emif_0_avl_to_master_0_master_rsp_width_adapter_src_startofpacket;    // mem_if_ddr3_emif_0_avl_to_master_0_master_rsp_width_adapter:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          mem_if_ddr3_emif_0_avl_to_master_0_master_rsp_width_adapter_src_endofpacket;      // mem_if_ddr3_emif_0_avl_to_master_0_master_rsp_width_adapter:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_004_src0_valid;                                                         // rsp_demux_004:src0_valid -> onchip_memory2_0_s1_to_mm_master_bfm_0_m0_rsp_width_adapter:in_valid
	wire   [92:0] rsp_demux_004_src0_data;                                                          // rsp_demux_004:src0_data -> onchip_memory2_0_s1_to_mm_master_bfm_0_m0_rsp_width_adapter:in_data
	wire          rsp_demux_004_src0_ready;                                                         // onchip_memory2_0_s1_to_mm_master_bfm_0_m0_rsp_width_adapter:in_ready -> rsp_demux_004:src0_ready
	wire    [4:0] rsp_demux_004_src0_channel;                                                       // rsp_demux_004:src0_channel -> onchip_memory2_0_s1_to_mm_master_bfm_0_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_004_src0_startofpacket;                                                 // rsp_demux_004:src0_startofpacket -> onchip_memory2_0_s1_to_mm_master_bfm_0_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                   // rsp_demux_004:src0_endofpacket -> onchip_memory2_0_s1_to_mm_master_bfm_0_m0_rsp_width_adapter:in_endofpacket
	wire          onchip_memory2_0_s1_to_mm_master_bfm_0_m0_rsp_width_adapter_src_valid;            // onchip_memory2_0_s1_to_mm_master_bfm_0_m0_rsp_width_adapter:out_valid -> rsp_mux:sink4_valid
	wire  [119:0] onchip_memory2_0_s1_to_mm_master_bfm_0_m0_rsp_width_adapter_src_data;             // onchip_memory2_0_s1_to_mm_master_bfm_0_m0_rsp_width_adapter:out_data -> rsp_mux:sink4_data
	wire          onchip_memory2_0_s1_to_mm_master_bfm_0_m0_rsp_width_adapter_src_ready;            // rsp_mux:sink4_ready -> onchip_memory2_0_s1_to_mm_master_bfm_0_m0_rsp_width_adapter:out_ready
	wire    [4:0] onchip_memory2_0_s1_to_mm_master_bfm_0_m0_rsp_width_adapter_src_channel;          // onchip_memory2_0_s1_to_mm_master_bfm_0_m0_rsp_width_adapter:out_channel -> rsp_mux:sink4_channel
	wire          onchip_memory2_0_s1_to_mm_master_bfm_0_m0_rsp_width_adapter_src_startofpacket;    // onchip_memory2_0_s1_to_mm_master_bfm_0_m0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink4_startofpacket
	wire          onchip_memory2_0_s1_to_mm_master_bfm_0_m0_rsp_width_adapter_src_endofpacket;      // onchip_memory2_0_s1_to_mm_master_bfm_0_m0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                         // rsp_demux_004:src1_valid -> onchip_memory2_0_s1_to_mm_bridge_0_m0_rsp_width_adapter:in_valid
	wire   [92:0] rsp_demux_004_src1_data;                                                          // rsp_demux_004:src1_data -> onchip_memory2_0_s1_to_mm_bridge_0_m0_rsp_width_adapter:in_data
	wire          rsp_demux_004_src1_ready;                                                         // onchip_memory2_0_s1_to_mm_bridge_0_m0_rsp_width_adapter:in_ready -> rsp_demux_004:src1_ready
	wire    [4:0] rsp_demux_004_src1_channel;                                                       // rsp_demux_004:src1_channel -> onchip_memory2_0_s1_to_mm_bridge_0_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_004_src1_startofpacket;                                                 // rsp_demux_004:src1_startofpacket -> onchip_memory2_0_s1_to_mm_bridge_0_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                   // rsp_demux_004:src1_endofpacket -> onchip_memory2_0_s1_to_mm_bridge_0_m0_rsp_width_adapter:in_endofpacket
	wire          onchip_memory2_0_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_valid;                // onchip_memory2_0_s1_to_mm_bridge_0_m0_rsp_width_adapter:out_valid -> rsp_mux_001:sink4_valid
	wire  [119:0] onchip_memory2_0_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_data;                 // onchip_memory2_0_s1_to_mm_bridge_0_m0_rsp_width_adapter:out_data -> rsp_mux_001:sink4_data
	wire          onchip_memory2_0_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_ready;                // rsp_mux_001:sink4_ready -> onchip_memory2_0_s1_to_mm_bridge_0_m0_rsp_width_adapter:out_ready
	wire    [4:0] onchip_memory2_0_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_channel;              // onchip_memory2_0_s1_to_mm_bridge_0_m0_rsp_width_adapter:out_channel -> rsp_mux_001:sink4_channel
	wire          onchip_memory2_0_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket;        // onchip_memory2_0_s1_to_mm_bridge_0_m0_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          onchip_memory2_0_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket;          // onchip_memory2_0_s1_to_mm_bridge_0_m0_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_004_src2_valid;                                                         // rsp_demux_004:src2_valid -> onchip_memory2_0_s1_to_master_0_master_rsp_width_adapter:in_valid
	wire   [92:0] rsp_demux_004_src2_data;                                                          // rsp_demux_004:src2_data -> onchip_memory2_0_s1_to_master_0_master_rsp_width_adapter:in_data
	wire          rsp_demux_004_src2_ready;                                                         // onchip_memory2_0_s1_to_master_0_master_rsp_width_adapter:in_ready -> rsp_demux_004:src2_ready
	wire    [4:0] rsp_demux_004_src2_channel;                                                       // rsp_demux_004:src2_channel -> onchip_memory2_0_s1_to_master_0_master_rsp_width_adapter:in_channel
	wire          rsp_demux_004_src2_startofpacket;                                                 // rsp_demux_004:src2_startofpacket -> onchip_memory2_0_s1_to_master_0_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_004_src2_endofpacket;                                                   // rsp_demux_004:src2_endofpacket -> onchip_memory2_0_s1_to_master_0_master_rsp_width_adapter:in_endofpacket
	wire          onchip_memory2_0_s1_to_master_0_master_rsp_width_adapter_src_valid;               // onchip_memory2_0_s1_to_master_0_master_rsp_width_adapter:out_valid -> rsp_mux_002:sink4_valid
	wire  [119:0] onchip_memory2_0_s1_to_master_0_master_rsp_width_adapter_src_data;                // onchip_memory2_0_s1_to_master_0_master_rsp_width_adapter:out_data -> rsp_mux_002:sink4_data
	wire          onchip_memory2_0_s1_to_master_0_master_rsp_width_adapter_src_ready;               // rsp_mux_002:sink4_ready -> onchip_memory2_0_s1_to_master_0_master_rsp_width_adapter:out_ready
	wire    [4:0] onchip_memory2_0_s1_to_master_0_master_rsp_width_adapter_src_channel;             // onchip_memory2_0_s1_to_master_0_master_rsp_width_adapter:out_channel -> rsp_mux_002:sink4_channel
	wire          onchip_memory2_0_s1_to_master_0_master_rsp_width_adapter_src_startofpacket;       // onchip_memory2_0_s1_to_master_0_master_rsp_width_adapter:out_startofpacket -> rsp_mux_002:sink4_startofpacket
	wire          onchip_memory2_0_s1_to_master_0_master_rsp_width_adapter_src_endofpacket;         // onchip_memory2_0_s1_to_master_0_master_rsp_width_adapter:out_endofpacket -> rsp_mux_002:sink4_endofpacket
	wire          rsp_demux_004_src3_valid;                                                         // rsp_demux_004:src3_valid -> onchip_memory2_0_s1_to_dma_0_read_master_rsp_width_adapter:in_valid
	wire   [92:0] rsp_demux_004_src3_data;                                                          // rsp_demux_004:src3_data -> onchip_memory2_0_s1_to_dma_0_read_master_rsp_width_adapter:in_data
	wire          rsp_demux_004_src3_ready;                                                         // onchip_memory2_0_s1_to_dma_0_read_master_rsp_width_adapter:in_ready -> rsp_demux_004:src3_ready
	wire    [4:0] rsp_demux_004_src3_channel;                                                       // rsp_demux_004:src3_channel -> onchip_memory2_0_s1_to_dma_0_read_master_rsp_width_adapter:in_channel
	wire          rsp_demux_004_src3_startofpacket;                                                 // rsp_demux_004:src3_startofpacket -> onchip_memory2_0_s1_to_dma_0_read_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_004_src3_endofpacket;                                                   // rsp_demux_004:src3_endofpacket -> onchip_memory2_0_s1_to_dma_0_read_master_rsp_width_adapter:in_endofpacket
	wire          onchip_memory2_0_s1_to_dma_0_read_master_rsp_width_adapter_src_valid;             // onchip_memory2_0_s1_to_dma_0_read_master_rsp_width_adapter:out_valid -> rsp_mux_004:sink0_valid
	wire  [155:0] onchip_memory2_0_s1_to_dma_0_read_master_rsp_width_adapter_src_data;              // onchip_memory2_0_s1_to_dma_0_read_master_rsp_width_adapter:out_data -> rsp_mux_004:sink0_data
	wire          onchip_memory2_0_s1_to_dma_0_read_master_rsp_width_adapter_src_ready;             // rsp_mux_004:sink0_ready -> onchip_memory2_0_s1_to_dma_0_read_master_rsp_width_adapter:out_ready
	wire    [4:0] onchip_memory2_0_s1_to_dma_0_read_master_rsp_width_adapter_src_channel;           // onchip_memory2_0_s1_to_dma_0_read_master_rsp_width_adapter:out_channel -> rsp_mux_004:sink0_channel
	wire          onchip_memory2_0_s1_to_dma_0_read_master_rsp_width_adapter_src_startofpacket;     // onchip_memory2_0_s1_to_dma_0_read_master_rsp_width_adapter:out_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          onchip_memory2_0_s1_to_dma_0_read_master_rsp_width_adapter_src_endofpacket;       // onchip_memory2_0_s1_to_dma_0_read_master_rsp_width_adapter:out_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire    [4:0] mm_master_bfm_0_m0_limiter_cmd_valid_data;                                        // mm_master_bfm_0_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [4:0] mm_bridge_0_m0_limiter_cmd_valid_data;                                            // mm_bridge_0_m0_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire    [4:0] master_0_master_limiter_cmd_valid_data;                                           // master_0_master_limiter:cmd_src_valid -> cmd_demux_002:sink_valid
	wire          mem_if_ddr3_emif_0_avl_agent_rdata_fifo_out_valid;                                // mem_if_ddr3_emif_0_avl_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [65:0] mem_if_ddr3_emif_0_avl_agent_rdata_fifo_out_data;                                 // mem_if_ddr3_emif_0_avl_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          mem_if_ddr3_emif_0_avl_agent_rdata_fifo_out_ready;                                // avalon_st_adapter:in_0_ready -> mem_if_ddr3_emif_0_avl_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                    // avalon_st_adapter:out_0_valid -> mem_if_ddr3_emif_0_avl_agent:rdata_fifo_sink_valid
	wire   [65:0] avalon_st_adapter_out_0_data;                                                     // avalon_st_adapter:out_0_data -> mem_if_ddr3_emif_0_avl_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                    // mem_if_ddr3_emif_0_avl_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                    // avalon_st_adapter:out_0_error -> mem_if_ddr3_emif_0_avl_agent:rdata_fifo_sink_error
	wire          dma_0_control_port_slave_agent_rdata_fifo_src_valid;                              // dma_0_control_port_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] dma_0_control_port_slave_agent_rdata_fifo_src_data;                               // dma_0_control_port_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          dma_0_control_port_slave_agent_rdata_fifo_src_ready;                              // avalon_st_adapter_001:in_0_ready -> dma_0_control_port_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                // avalon_st_adapter_001:out_0_valid -> dma_0_control_port_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                 // avalon_st_adapter_001:out_0_data -> dma_0_control_port_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                // dma_0_control_port_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                // avalon_st_adapter_001:out_0_error -> dma_0_control_port_slave_agent:rdata_fifo_sink_error
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid;                            // sysid_qsys_0_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] sysid_qsys_0_control_slave_agent_rdata_fifo_src_data;                             // sysid_qsys_0_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_002:in_0_ready -> sysid_qsys_0_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                // avalon_st_adapter_002:out_0_valid -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                 // avalon_st_adapter_002:out_0_data -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                // sysid_qsys_0_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                // avalon_st_adapter_002:out_0_error -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_error
	wire          pio_0_s1_agent_rdata_fifo_src_valid;                                              // pio_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] pio_0_s1_agent_rdata_fifo_src_data;                                               // pio_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          pio_0_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_003:in_0_ready -> pio_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                // avalon_st_adapter_003:out_0_valid -> pio_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                 // avalon_st_adapter_003:out_0_data -> pio_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                // pio_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                // avalon_st_adapter_003:out_0_error -> pio_0_s1_agent:rdata_fifo_sink_error
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_valid;                                   // onchip_memory2_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire    [9:0] onchip_memory2_0_s1_agent_rdata_fifo_src_data;                                    // onchip_memory2_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_ready;                                   // avalon_st_adapter_004:in_0_ready -> onchip_memory2_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                // avalon_st_adapter_004:out_0_valid -> onchip_memory2_0_s1_agent:rdata_fifo_sink_valid
	wire    [9:0] avalon_st_adapter_004_out_0_data;                                                 // avalon_st_adapter_004:out_0_data -> onchip_memory2_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                // onchip_memory2_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                // avalon_st_adapter_004:out_0_error -> onchip_memory2_0_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (30),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (5),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_master_bfm_0_m0_translator (
		.clk                    (mem_if_ddr3_emif_0_afi_clk_clk),                                        //                       clk.clk
		.reset                  (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset),                 //                     reset.reset
		.uav_address            (mm_master_bfm_0_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (mm_master_bfm_0_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (mm_master_bfm_0_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (mm_master_bfm_0_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (mm_master_bfm_0_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (mm_master_bfm_0_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (mm_master_bfm_0_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (mm_master_bfm_0_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (mm_master_bfm_0_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (mm_master_bfm_0_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (mm_master_bfm_0_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (mm_master_bfm_0_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (mm_master_bfm_0_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (mm_master_bfm_0_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (mm_master_bfm_0_m0_byteenable),                                         //                          .byteenable
		.av_read                (mm_master_bfm_0_m0_read),                                               //                          .read
		.av_readdata            (mm_master_bfm_0_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (mm_master_bfm_0_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (mm_master_bfm_0_m0_write),                                              //                          .write
		.av_writedata           (mm_master_bfm_0_m0_writedata),                                          //                          .writedata
		.av_beginbursttransfer  (1'b0),                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                  //               (terminated)
		.av_lock                (1'b0),                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                  //               (terminated)
		.uav_clken              (),                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                 //               (terminated)
		.av_response            (),                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                       //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (30),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_bridge_0_m0_translator (
		.clk                    (mem_if_ddr3_emif_0_afi_clk_clk),                                    //                       clk.clk
		.reset                  (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset),             //                     reset.reset
		.uav_address            (mm_bridge_0_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (mm_bridge_0_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (mm_bridge_0_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (mm_bridge_0_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (mm_bridge_0_m0_byteenable),                                         //                          .byteenable
		.av_read                (mm_bridge_0_m0_read),                                               //                          .read
		.av_readdata            (mm_bridge_0_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (mm_bridge_0_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (mm_bridge_0_m0_write),                                              //                          .write
		.av_writedata           (mm_bridge_0_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (mm_bridge_0_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                              //               (terminated)
		.av_begintransfer       (1'b0),                                                              //               (terminated)
		.av_chipselect          (1'b0),                                                              //               (terminated)
		.av_lock                (1'b0),                                                              //               (terminated)
		.uav_clken              (),                                                                  //               (terminated)
		.av_clken               (1'b1),                                                              //               (terminated)
		.uav_response           (2'b00),                                                             //               (terminated)
		.av_response            (),                                                                  //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                              //               (terminated)
		.av_writeresponsevalid  ()                                                                   //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) master_0_master_translator (
		.clk                    (mem_if_ddr3_emif_0_afi_clk_clk),                                     //                       clk.clk
		.reset                  (master_0_master_translator_reset_reset_bridge_in_reset_reset),       //                     reset.reset
		.uav_address            (master_0_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (master_0_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (master_0_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (master_0_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (master_0_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (master_0_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (master_0_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (master_0_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (master_0_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (master_0_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (master_0_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (master_0_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (master_0_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (master_0_master_byteenable),                                         //                          .byteenable
		.av_read                (master_0_master_read),                                               //                          .read
		.av_readdata            (master_0_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (master_0_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (master_0_master_write),                                              //                          .write
		.av_writedata           (master_0_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                               //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                               //               (terminated)
		.av_lock                (1'b0),                                                               //               (terminated)
		.av_debugaccess         (1'b0),                                                               //               (terminated)
		.uav_clken              (),                                                                   //               (terminated)
		.av_clken               (1'b1),                                                               //               (terminated)
		.uav_response           (2'b00),                                                              //               (terminated)
		.av_response            (),                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                    //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (8),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (11),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_0_write_master_translator (
		.clk                    (mem_if_ddr3_emif_0_afi_clk_clk),                                        //                       clk.clk
		.reset                  (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset),                 //                     reset.reset
		.uav_address            (dma_0_write_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (dma_0_write_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (dma_0_write_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (dma_0_write_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (dma_0_write_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (dma_0_write_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (dma_0_write_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (dma_0_write_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (dma_0_write_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (dma_0_write_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (dma_0_write_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (dma_0_write_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (dma_0_write_master_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (dma_0_write_master_burstcount),                                         //                          .burstcount
		.av_byteenable          (dma_0_write_master_byteenable),                                         //                          .byteenable
		.av_chipselect          (dma_0_write_master_chipselect),                                         //                          .chipselect
		.av_write               (dma_0_write_master_write),                                              //                          .write
		.av_writedata           (dma_0_write_master_writedata),                                          //                          .writedata
		.av_beginbursttransfer  (1'b0),                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                  //               (terminated)
		.av_read                (1'b0),                                                                  //               (terminated)
		.av_readdata            (),                                                                      //               (terminated)
		.av_readdatavalid       (),                                                                      //               (terminated)
		.av_lock                (1'b0),                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                  //               (terminated)
		.uav_clken              (),                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                 //               (terminated)
		.av_response            (),                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                       //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (8),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (11),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_0_read_master_translator (
		.clk                    (mem_if_ddr3_emif_0_afi_clk_clk),                                       //                       clk.clk
		.reset                  (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset),                //                     reset.reset
		.uav_address            (dma_0_read_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (dma_0_read_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (dma_0_read_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (dma_0_read_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (dma_0_read_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (dma_0_read_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (dma_0_read_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (dma_0_read_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (dma_0_read_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (dma_0_read_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (dma_0_read_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (dma_0_read_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (dma_0_read_master_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (dma_0_read_master_burstcount),                                         //                          .burstcount
		.av_chipselect          (dma_0_read_master_chipselect),                                         //                          .chipselect
		.av_read                (dma_0_read_master_read),                                               //                          .read
		.av_readdata            (dma_0_read_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (dma_0_read_master_readdatavalid),                                      //                          .readdatavalid
		.av_byteenable          (8'b11111111),                                                          //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                 //               (terminated)
		.av_write               (1'b0),                                                                 //               (terminated)
		.av_writedata           (64'b0000000000000000000000000000000000000000000000000000000000000000), //               (terminated)
		.av_lock                (1'b0),                                                                 //               (terminated)
		.av_debugaccess         (1'b0),                                                                 //               (terminated)
		.uav_clken              (),                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                //               (terminated)
		.av_response            (),                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                      //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (24),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (10),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (13),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mem_if_ddr3_emif_0_avl_translator (
		.clk                    (mem_if_ddr3_emif_0_afi_clk_clk),                                      //                      clk.clk
		.reset                  (mem_if_ddr3_emif_0_avl_translator_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (mem_if_ddr3_emif_0_avl_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (mem_if_ddr3_emif_0_avl_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (mem_if_ddr3_emif_0_avl_agent_m0_read),                                //                         .read
		.uav_write              (mem_if_ddr3_emif_0_avl_agent_m0_write),                               //                         .write
		.uav_waitrequest        (mem_if_ddr3_emif_0_avl_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (mem_if_ddr3_emif_0_avl_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (mem_if_ddr3_emif_0_avl_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (mem_if_ddr3_emif_0_avl_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (mem_if_ddr3_emif_0_avl_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (mem_if_ddr3_emif_0_avl_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (mem_if_ddr3_emif_0_avl_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (mem_if_ddr3_emif_0_avl_address),                                      //      avalon_anti_slave_0.address
		.av_write               (mem_if_ddr3_emif_0_avl_write),                                        //                         .write
		.av_read                (mem_if_ddr3_emif_0_avl_read),                                         //                         .read
		.av_readdata            (mem_if_ddr3_emif_0_avl_readdata),                                     //                         .readdata
		.av_writedata           (mem_if_ddr3_emif_0_avl_writedata),                                    //                         .writedata
		.av_beginbursttransfer  (mem_if_ddr3_emif_0_avl_beginbursttransfer),                           //                         .beginbursttransfer
		.av_burstcount          (mem_if_ddr3_emif_0_avl_burstcount),                                   //                         .burstcount
		.av_byteenable          (mem_if_ddr3_emif_0_avl_byteenable),                                   //                         .byteenable
		.av_readdatavalid       (mem_if_ddr3_emif_0_avl_readdatavalid),                                //                         .readdatavalid
		.av_waitrequest         (mem_if_ddr3_emif_0_avl_waitrequest),                                  //                         .waitrequest
		.av_begintransfer       (),                                                                    //              (terminated)
		.av_writebyteenable     (),                                                                    //              (terminated)
		.av_lock                (),                                                                    //              (terminated)
		.av_chipselect          (),                                                                    //              (terminated)
		.av_clken               (),                                                                    //              (terminated)
		.uav_clken              (1'b0),                                                                //              (terminated)
		.av_debugaccess         (),                                                                    //              (terminated)
		.av_outputenable        (),                                                                    //              (terminated)
		.uav_response           (),                                                                    //              (terminated)
		.av_response            (2'b00),                                                               //              (terminated)
		.uav_writeresponsevalid (),                                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (28),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_0_control_port_slave_translator (
		.clk                    (mem_if_ddr3_emif_0_afi_clk_clk),                        //                      clk.clk
		.reset                  (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dma_0_control_port_slave_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (dma_0_control_port_slave_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (dma_0_control_port_slave_agent_m0_read),                //                         .read
		.uav_write              (dma_0_control_port_slave_agent_m0_write),               //                         .write
		.uav_waitrequest        (dma_0_control_port_slave_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (dma_0_control_port_slave_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (dma_0_control_port_slave_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (dma_0_control_port_slave_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (dma_0_control_port_slave_agent_m0_writedata),           //                         .writedata
		.uav_lock               (dma_0_control_port_slave_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (dma_0_control_port_slave_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (dma_0_control_port_slave_address),                      //      avalon_anti_slave_0.address
		.av_write               (dma_0_control_port_slave_write),                        //                         .write
		.av_readdata            (dma_0_control_port_slave_readdata),                     //                         .readdata
		.av_writedata           (dma_0_control_port_slave_writedata),                    //                         .writedata
		.av_chipselect          (dma_0_control_port_slave_chipselect),                   //                         .chipselect
		.av_read                (),                                                      //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_0_control_slave_translator (
		.clk                    (mem_if_ddr3_emif_0_afi_clk_clk),                    //                      clk.clk
		.reset                  (sysid_qsys_0_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (sysid_qsys_0_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_qsys_0_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysid_qsys_0_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sysid_qsys_0_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysid_qsys_0_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysid_qsys_0_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysid_qsys_0_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysid_qsys_0_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysid_qsys_0_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysid_qsys_0_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysid_qsys_0_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sysid_qsys_0_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (sysid_qsys_0_control_slave_readdata),               //                         .readdata
		.av_write               (),                                                  //              (terminated)
		.av_read                (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_0_s1_translator (
		.clk                    (mem_if_ddr3_emif_0_afi_clk_clk),          //                      clk.clk
		.reset                  (pio_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_0_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (pio_0_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (pio_0_s1_agent_m0_read),                  //                         .read
		.uav_write              (pio_0_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (pio_0_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (pio_0_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (pio_0_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (pio_0_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (pio_0_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (pio_0_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (pio_0_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (pio_0_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (pio_0_s1_write),                          //                         .write
		.av_readdata            (pio_0_s1_readdata),                       //                         .readdata
		.av_writedata           (pio_0_s1_writedata),                      //                         .writedata
		.av_chipselect          (pio_0_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (15),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_0_s1_translator (
		.clk                    (mem_if_ddr3_emif_0_afi_clk_clk),                        //                      clk.clk
		.reset                  (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_memory2_0_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_0_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (onchip_memory2_0_s1_agent_m0_read),                     //                         .read
		.uav_write              (onchip_memory2_0_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (onchip_memory2_0_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_0_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (onchip_memory2_0_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (onchip_memory2_0_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (onchip_memory2_0_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (onchip_memory2_0_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (onchip_memory2_0_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (onchip_memory2_0_s1_address),                           //      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_0_s1_write),                             //                         .write
		.av_readdata            (onchip_memory2_0_s1_readdata),                          //                         .readdata
		.av_writedata           (onchip_memory2_0_s1_writedata),                         //                         .writedata
		.av_chipselect          (onchip_memory2_0_s1_chipselect),                        //                         .chipselect
		.av_clken               (onchip_memory2_0_s1_clken),                             //                         .clken
		.av_read                (),                                                      //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_QOS_H                 (100),
		.PKT_QOS_L                 (100),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_CACHE_H               (114),
		.PKT_CACHE_L               (111),
		.PKT_THREAD_ID_H           (107),
		.PKT_THREAD_ID_L           (107),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (104),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (5),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (4),
		.BURSTWRAP_VALUE           (15),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_master_bfm_0_m0_agent (
		.clk                   (mem_if_ddr3_emif_0_afi_clk_clk),                                        //       clk.clk
		.reset                 (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.av_address            (mm_master_bfm_0_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (mm_master_bfm_0_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (mm_master_bfm_0_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (mm_master_bfm_0_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (mm_master_bfm_0_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (mm_master_bfm_0_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (mm_master_bfm_0_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (mm_master_bfm_0_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (mm_master_bfm_0_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (mm_master_bfm_0_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (mm_master_bfm_0_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (mm_master_bfm_0_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (mm_master_bfm_0_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (mm_master_bfm_0_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (mm_master_bfm_0_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (mm_master_bfm_0_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (mm_master_bfm_0_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (mm_master_bfm_0_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (mm_master_bfm_0_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (mm_master_bfm_0_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (mm_master_bfm_0_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (mm_master_bfm_0_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                      // (terminated)
		.av_writeresponsevalid ()                                                                       // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_QOS_H                 (100),
		.PKT_QOS_L                 (100),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_CACHE_H               (114),
		.PKT_CACHE_L               (111),
		.PKT_THREAD_ID_H           (107),
		.PKT_THREAD_ID_L           (107),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (104),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (3),
		.BURSTWRAP_VALUE           (31),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_0_m0_agent (
		.clk                   (mem_if_ddr3_emif_0_afi_clk_clk),                                    //       clk.clk
		.reset                 (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.av_address            (mm_bridge_0_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (mm_bridge_0_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (mm_bridge_0_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (mm_bridge_0_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (mm_bridge_0_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (mm_bridge_0_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (mm_bridge_0_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (mm_bridge_0_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (mm_bridge_0_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (mm_bridge_0_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (mm_bridge_0_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (mm_bridge_0_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                  // (terminated)
		.av_writeresponsevalid ()                                                                   // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_QOS_H                 (100),
		.PKT_QOS_L                 (100),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_CACHE_H               (114),
		.PKT_CACHE_L               (111),
		.PKT_THREAD_ID_H           (107),
		.PKT_THREAD_ID_L           (107),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (104),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (2),
		.BURSTWRAP_VALUE           (31),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) master_0_master_agent (
		.clk                   (mem_if_ddr3_emif_0_afi_clk_clk),                                     //       clk.clk
		.reset                 (master_0_master_translator_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.av_address            (master_0_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (master_0_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (master_0_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (master_0_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (master_0_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (master_0_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (master_0_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (master_0_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (master_0_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (master_0_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (master_0_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (master_0_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (master_0_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (master_0_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (master_0_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (master_0_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (master_0_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (master_0_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (master_0_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (master_0_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (master_0_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (master_0_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                    // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (155),
		.PKT_ORI_BURST_SIZE_L      (153),
		.PKT_RESPONSE_STATUS_H     (152),
		.PKT_RESPONSE_STATUS_L     (151),
		.PKT_QOS_H                 (136),
		.PKT_QOS_L                 (136),
		.PKT_DATA_SIDEBAND_H       (134),
		.PKT_DATA_SIDEBAND_L       (134),
		.PKT_ADDR_SIDEBAND_H       (133),
		.PKT_ADDR_SIDEBAND_L       (133),
		.PKT_BURST_TYPE_H          (132),
		.PKT_BURST_TYPE_L          (131),
		.PKT_CACHE_H               (150),
		.PKT_CACHE_L               (147),
		.PKT_THREAD_ID_H           (143),
		.PKT_THREAD_ID_L           (143),
		.PKT_BURST_SIZE_H          (130),
		.PKT_BURST_SIZE_L          (128),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (135),
		.PKT_PROTECTION_H          (146),
		.PKT_PROTECTION_L          (144),
		.PKT_BURSTWRAP_H           (127),
		.PKT_BURSTWRAP_L           (123),
		.PKT_BYTE_CNT_H            (122),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (139),
		.PKT_SRC_ID_L              (137),
		.PKT_DEST_ID_H             (142),
		.PKT_DEST_ID_L             (140),
		.ST_DATA_W                 (156),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (11),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (31),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_0_write_master_agent (
		.clk                   (mem_if_ddr3_emif_0_afi_clk_clk),                                        //       clk.clk
		.reset                 (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.av_address            (dma_0_write_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_0_write_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_0_write_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_0_write_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_0_write_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_0_write_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_0_write_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_0_write_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_0_write_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_0_write_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_0_write_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_0_write_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_0_write_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_0_write_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_0_write_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_0_write_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_003_src_valid),                                                 //        rp.valid
		.rp_data               (rsp_mux_003_src_data),                                                  //          .data
		.rp_channel            (rsp_mux_003_src_channel),                                               //          .channel
		.rp_startofpacket      (rsp_mux_003_src_startofpacket),                                         //          .startofpacket
		.rp_endofpacket        (rsp_mux_003_src_endofpacket),                                           //          .endofpacket
		.rp_ready              (rsp_mux_003_src_ready),                                                 //          .ready
		.av_response           (),                                                                      // (terminated)
		.av_writeresponsevalid ()                                                                       // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (155),
		.PKT_ORI_BURST_SIZE_L      (153),
		.PKT_RESPONSE_STATUS_H     (152),
		.PKT_RESPONSE_STATUS_L     (151),
		.PKT_QOS_H                 (136),
		.PKT_QOS_L                 (136),
		.PKT_DATA_SIDEBAND_H       (134),
		.PKT_DATA_SIDEBAND_L       (134),
		.PKT_ADDR_SIDEBAND_H       (133),
		.PKT_ADDR_SIDEBAND_L       (133),
		.PKT_BURST_TYPE_H          (132),
		.PKT_BURST_TYPE_L          (131),
		.PKT_CACHE_H               (150),
		.PKT_CACHE_L               (147),
		.PKT_THREAD_ID_H           (143),
		.PKT_THREAD_ID_L           (143),
		.PKT_BURST_SIZE_H          (130),
		.PKT_BURST_SIZE_L          (128),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (135),
		.PKT_PROTECTION_H          (146),
		.PKT_PROTECTION_L          (144),
		.PKT_BURSTWRAP_H           (127),
		.PKT_BURSTWRAP_L           (123),
		.PKT_BYTE_CNT_H            (122),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (139),
		.PKT_SRC_ID_L              (137),
		.PKT_DEST_ID_H             (142),
		.PKT_DEST_ID_L             (140),
		.ST_DATA_W                 (156),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (11),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (31),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_0_read_master_agent (
		.clk                   (mem_if_ddr3_emif_0_afi_clk_clk),                                       //       clk.clk
		.reset                 (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.av_address            (dma_0_read_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_0_read_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_0_read_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_0_read_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_0_read_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_0_read_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_0_read_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_0_read_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_0_read_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_0_read_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_0_read_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_0_read_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_0_read_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_0_read_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_0_read_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_0_read_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_004_src_valid),                                                //        rp.valid
		.rp_data               (rsp_mux_004_src_data),                                                 //          .data
		.rp_channel            (rsp_mux_004_src_channel),                                              //          .channel
		.rp_startofpacket      (rsp_mux_004_src_startofpacket),                                        //          .startofpacket
		.rp_endofpacket        (rsp_mux_004_src_endofpacket),                                          //          .endofpacket
		.rp_ready              (rsp_mux_004_src_ready),                                                //          .ready
		.av_response           (),                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (155),
		.PKT_ORI_BURST_SIZE_L      (153),
		.PKT_RESPONSE_STATUS_H     (152),
		.PKT_RESPONSE_STATUS_L     (151),
		.PKT_BURST_SIZE_H          (130),
		.PKT_BURST_SIZE_L          (128),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (135),
		.PKT_PROTECTION_H          (146),
		.PKT_PROTECTION_L          (144),
		.PKT_BURSTWRAP_H           (127),
		.PKT_BURSTWRAP_L           (123),
		.PKT_BYTE_CNT_H            (122),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (139),
		.PKT_SRC_ID_L              (137),
		.PKT_DEST_ID_H             (142),
		.PKT_DEST_ID_L             (140),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (156),
		.AVS_BURSTCOUNT_W          (13),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mem_if_ddr3_emif_0_avl_agent (
		.clk                     (mem_if_ddr3_emif_0_afi_clk_clk),                                      //             clk.clk
		.reset                   (mem_if_ddr3_emif_0_avl_translator_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (mem_if_ddr3_emif_0_avl_agent_m0_address),                             //              m0.address
		.m0_burstcount           (mem_if_ddr3_emif_0_avl_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (mem_if_ddr3_emif_0_avl_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (mem_if_ddr3_emif_0_avl_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (mem_if_ddr3_emif_0_avl_agent_m0_lock),                                //                .lock
		.m0_readdata             (mem_if_ddr3_emif_0_avl_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (mem_if_ddr3_emif_0_avl_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (mem_if_ddr3_emif_0_avl_agent_m0_read),                                //                .read
		.m0_waitrequest          (mem_if_ddr3_emif_0_avl_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (mem_if_ddr3_emif_0_avl_agent_m0_writedata),                           //                .writedata
		.m0_write                (mem_if_ddr3_emif_0_avl_agent_m0_write),                               //                .write
		.rp_endofpacket          (mem_if_ddr3_emif_0_avl_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (mem_if_ddr3_emif_0_avl_agent_rp_ready),                               //                .ready
		.rp_valid                (mem_if_ddr3_emif_0_avl_agent_rp_valid),                               //                .valid
		.rp_data                 (mem_if_ddr3_emif_0_avl_agent_rp_data),                                //                .data
		.rp_startofpacket        (mem_if_ddr3_emif_0_avl_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                                   //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                                   //                .valid
		.cp_data                 (cmd_mux_src_data),                                                    //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                             //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                                 //                .channel
		.rf_sink_ready           (mem_if_ddr3_emif_0_avl_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (mem_if_ddr3_emif_0_avl_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (mem_if_ddr3_emif_0_avl_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (mem_if_ddr3_emif_0_avl_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (mem_if_ddr3_emif_0_avl_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (mem_if_ddr3_emif_0_avl_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (mem_if_ddr3_emif_0_avl_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (mem_if_ddr3_emif_0_avl_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (mem_if_ddr3_emif_0_avl_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (mem_if_ddr3_emif_0_avl_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                       //                .error
		.rdata_fifo_src_ready    (mem_if_ddr3_emif_0_avl_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mem_if_ddr3_emif_0_avl_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (mem_if_ddr3_emif_0_avl_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (157),
		.FIFO_DEPTH          (33),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mem_if_ddr3_emif_0_avl_agent_rsp_fifo (
		.clk               (mem_if_ddr3_emif_0_afi_clk_clk),                                      //       clk.clk
		.reset             (mem_if_ddr3_emif_0_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mem_if_ddr3_emif_0_avl_agent_rf_source_data),                         //        in.data
		.in_valid          (mem_if_ddr3_emif_0_avl_agent_rf_source_valid),                        //          .valid
		.in_ready          (mem_if_ddr3_emif_0_avl_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (mem_if_ddr3_emif_0_avl_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (mem_if_ddr3_emif_0_avl_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (mem_if_ddr3_emif_0_avl_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (mem_if_ddr3_emif_0_avl_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (mem_if_ddr3_emif_0_avl_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (mem_if_ddr3_emif_0_avl_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (mem_if_ddr3_emif_0_avl_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                               // (terminated)
		.csr_read          (1'b0),                                                                // (terminated)
		.csr_write         (1'b0),                                                                // (terminated)
		.csr_readdata      (),                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                // (terminated)
		.almost_full_data  (),                                                                    // (terminated)
		.almost_empty_data (),                                                                    // (terminated)
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.in_error          (1'b0),                                                                // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_channel        (1'b0),                                                                // (terminated)
		.out_channel       ()                                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (66),
		.FIFO_DEPTH          (8192),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mem_if_ddr3_emif_0_avl_agent_rdata_fifo (
		.clk               (mem_if_ddr3_emif_0_afi_clk_clk),                                      //       clk.clk
		.reset             (mem_if_ddr3_emif_0_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mem_if_ddr3_emif_0_avl_agent_rdata_fifo_src_data),                    //        in.data
		.in_valid          (mem_if_ddr3_emif_0_avl_agent_rdata_fifo_src_valid),                   //          .valid
		.in_ready          (mem_if_ddr3_emif_0_avl_agent_rdata_fifo_src_ready),                   //          .ready
		.out_data          (mem_if_ddr3_emif_0_avl_agent_rdata_fifo_out_data),                    //       out.data
		.out_valid         (mem_if_ddr3_emif_0_avl_agent_rdata_fifo_out_valid),                   //          .valid
		.out_ready         (mem_if_ddr3_emif_0_avl_agent_rdata_fifo_out_ready),                   //          .ready
		.csr_address       (2'b00),                                                               // (terminated)
		.csr_read          (1'b0),                                                                // (terminated)
		.csr_write         (1'b0),                                                                // (terminated)
		.csr_readdata      (),                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                // (terminated)
		.almost_full_data  (),                                                                    // (terminated)
		.almost_empty_data (),                                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                                // (terminated)
		.in_endofpacket    (1'b0),                                                                // (terminated)
		.out_startofpacket (),                                                                    // (terminated)
		.out_endofpacket   (),                                                                    // (terminated)
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.in_error          (1'b0),                                                                // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_channel        (1'b0),                                                                // (terminated)
		.out_channel       ()                                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (104),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_0_control_port_slave_agent (
		.clk                     (mem_if_ddr3_emif_0_afi_clk_clk),                               //             clk.clk
		.reset                   (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (dma_0_control_port_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dma_0_control_port_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dma_0_control_port_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dma_0_control_port_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dma_0_control_port_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (dma_0_control_port_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dma_0_control_port_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dma_0_control_port_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (dma_0_control_port_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dma_0_control_port_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (dma_0_control_port_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (dma_0_control_port_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dma_0_control_port_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (dma_0_control_port_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (dma_0_control_port_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (dma_0_control_port_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dma_0_control_port_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (dma_0_control_port_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (dma_0_control_port_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (dma_0_control_port_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (dma_0_control_port_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (dma_0_control_port_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (dma_0_control_port_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dma_0_control_port_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dma_0_control_port_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dma_0_control_port_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dma_0_control_port_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dma_0_control_port_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dma_0_control_port_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dma_0_control_port_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dma_0_control_port_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dma_0_control_port_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (dma_0_control_port_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_0_control_port_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dma_0_control_port_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_0_control_port_slave_agent_rsp_fifo (
		.clk               (mem_if_ddr3_emif_0_afi_clk_clk),                            //       clk.clk
		.reset             (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (dma_0_control_port_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dma_0_control_port_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_0_control_port_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_0_control_port_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_0_control_port_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_0_control_port_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_0_control_port_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_0_control_port_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_0_control_port_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_0_control_port_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (104),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_qsys_0_control_slave_agent (
		.clk                     (mem_if_ddr3_emif_0_afi_clk_clk),                                 //             clk.clk
		.reset                   (sysid_qsys_0_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (sysid_qsys_0_control_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sysid_qsys_0_control_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sysid_qsys_0_control_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sysid_qsys_0_control_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sysid_qsys_0_control_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (sysid_qsys_0_control_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sysid_qsys_0_control_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sysid_qsys_0_control_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (sysid_qsys_0_control_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sysid_qsys_0_control_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (sysid_qsys_0_control_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (sysid_qsys_0_control_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sysid_qsys_0_control_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (sysid_qsys_0_control_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (sysid_qsys_0_control_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (sysid_qsys_0_control_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sysid_qsys_0_control_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sysid_qsys_0_control_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sysid_qsys_0_control_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sysid_qsys_0_control_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sysid_qsys_0_control_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sysid_qsys_0_control_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sysid_qsys_0_control_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sysid_qsys_0_control_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sysid_qsys_0_control_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_0_control_slave_agent_rsp_fifo (
		.clk               (mem_if_ddr3_emif_0_afi_clk_clk),                              //       clk.clk
		.reset             (sysid_qsys_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (sysid_qsys_0_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_qsys_0_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_qsys_0_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (104),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pio_0_s1_agent (
		.clk                     (mem_if_ddr3_emif_0_afi_clk_clk),               //             clk.clk
		.reset                   (pio_0_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (pio_0_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pio_0_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pio_0_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pio_0_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pio_0_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (pio_0_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pio_0_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pio_0_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (pio_0_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pio_0_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (pio_0_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (pio_0_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pio_0_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (pio_0_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (pio_0_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (pio_0_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pio_0_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pio_0_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pio_0_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pio_0_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pio_0_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pio_0_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pio_0_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pio_0_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pio_0_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pio_0_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pio_0_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pio_0_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pio_0_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pio_0_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pio_0_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pio_0_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),            //                .error
		.rdata_fifo_src_ready    (pio_0_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_0_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pio_0_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_0_s1_agent_rsp_fifo (
		.clk               (mem_if_ddr3_emif_0_afi_clk_clk),            //       clk.clk
		.reset             (pio_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (pio_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pio_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pio_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pio_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pio_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pio_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pio_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pio_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pio_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pio_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (92),
		.PKT_ORI_BURST_SIZE_L      (90),
		.PKT_RESPONSE_STATUS_H     (89),
		.PKT_RESPONSE_STATUS_L     (88),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_TRANS_LOCK            (45),
		.PKT_BEGIN_BURST           (72),
		.PKT_PROTECTION_H          (83),
		.PKT_PROTECTION_L          (81),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (60),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (47),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (76),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (79),
		.PKT_DEST_ID_L             (77),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (93),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory2_0_s1_agent (
		.clk                     (mem_if_ddr3_emif_0_afi_clk_clk),                          //             clk.clk
		.reset                   (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (onchip_memory2_0_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (onchip_memory2_0_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (onchip_memory2_0_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (onchip_memory2_0_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (onchip_memory2_0_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (onchip_memory2_0_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (onchip_memory2_0_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (onchip_memory2_0_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (onchip_memory2_0_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (onchip_memory2_0_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (onchip_memory2_0_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (onchip_memory2_0_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (onchip_memory2_0_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (onchip_memory2_0_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (onchip_memory2_0_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (onchip_memory2_0_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (onchip_memory2_0_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (onchip_memory2_0_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (onchip_memory2_0_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (onchip_memory2_0_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (onchip_memory2_0_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (onchip_memory2_0_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (94),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rsp_fifo (
		.clk               (mem_if_ddr3_emif_0_afi_clk_clk),                        //       clk.clk
		.reset             (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rf_source_data),              //        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (onchip_memory2_0_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (onchip_memory2_0_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	ddr_mm_interconnect_0_router router (
		.sink_ready         (mm_master_bfm_0_m0_agent_cp_ready),                     //      sink.ready
		.sink_valid         (mm_master_bfm_0_m0_agent_cp_valid),                     //          .valid
		.sink_data          (mm_master_bfm_0_m0_agent_cp_data),                      //          .data
		.sink_startofpacket (mm_master_bfm_0_m0_agent_cp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (mm_master_bfm_0_m0_agent_cp_endofpacket),               //          .endofpacket
		.clk                (mem_if_ddr3_emif_0_afi_clk_clk),                        //       clk.clk
		.reset              (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                      //       src.ready
		.src_valid          (router_src_valid),                                      //          .valid
		.src_data           (router_src_data),                                       //          .data
		.src_channel        (router_src_channel),                                    //          .channel
		.src_startofpacket  (router_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                 //          .endofpacket
	);

	ddr_mm_interconnect_0_router router_001 (
		.sink_ready         (mm_bridge_0_m0_agent_cp_ready),                         //      sink.ready
		.sink_valid         (mm_bridge_0_m0_agent_cp_valid),                         //          .valid
		.sink_data          (mm_bridge_0_m0_agent_cp_data),                          //          .data
		.sink_startofpacket (mm_bridge_0_m0_agent_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (mm_bridge_0_m0_agent_cp_endofpacket),                   //          .endofpacket
		.clk                (mem_if_ddr3_emif_0_afi_clk_clk),                        //       clk.clk
		.reset              (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                  //       src.ready
		.src_valid          (router_001_src_valid),                                  //          .valid
		.src_data           (router_001_src_data),                                   //          .data
		.src_channel        (router_001_src_channel),                                //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                             //          .endofpacket
	);

	ddr_mm_interconnect_0_router router_002 (
		.sink_ready         (master_0_master_agent_cp_ready),                               //      sink.ready
		.sink_valid         (master_0_master_agent_cp_valid),                               //          .valid
		.sink_data          (master_0_master_agent_cp_data),                                //          .data
		.sink_startofpacket (master_0_master_agent_cp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (master_0_master_agent_cp_endofpacket),                         //          .endofpacket
		.clk                (mem_if_ddr3_emif_0_afi_clk_clk),                               //       clk.clk
		.reset              (master_0_master_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                         //       src.ready
		.src_valid          (router_002_src_valid),                                         //          .valid
		.src_data           (router_002_src_data),                                          //          .data
		.src_channel        (router_002_src_channel),                                       //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                    //          .endofpacket
	);

	ddr_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (dma_0_write_master_agent_cp_ready),                     //      sink.ready
		.sink_valid         (dma_0_write_master_agent_cp_valid),                     //          .valid
		.sink_data          (dma_0_write_master_agent_cp_data),                      //          .data
		.sink_startofpacket (dma_0_write_master_agent_cp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (dma_0_write_master_agent_cp_endofpacket),               //          .endofpacket
		.clk                (mem_if_ddr3_emif_0_afi_clk_clk),                        //       clk.clk
		.reset              (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                  //       src.ready
		.src_valid          (router_003_src_valid),                                  //          .valid
		.src_data           (router_003_src_data),                                   //          .data
		.src_channel        (router_003_src_channel),                                //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                             //          .endofpacket
	);

	ddr_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (dma_0_read_master_agent_cp_ready),                      //      sink.ready
		.sink_valid         (dma_0_read_master_agent_cp_valid),                      //          .valid
		.sink_data          (dma_0_read_master_agent_cp_data),                       //          .data
		.sink_startofpacket (dma_0_read_master_agent_cp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (dma_0_read_master_agent_cp_endofpacket),                //          .endofpacket
		.clk                (mem_if_ddr3_emif_0_afi_clk_clk),                        //       clk.clk
		.reset              (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                  //       src.ready
		.src_valid          (router_004_src_valid),                                  //          .valid
		.src_data           (router_004_src_data),                                   //          .data
		.src_channel        (router_004_src_channel),                                //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                             //          .endofpacket
	);

	ddr_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (mem_if_ddr3_emif_0_avl_agent_rp_ready),                               //      sink.ready
		.sink_valid         (mem_if_ddr3_emif_0_avl_agent_rp_valid),                               //          .valid
		.sink_data          (mem_if_ddr3_emif_0_avl_agent_rp_data),                                //          .data
		.sink_startofpacket (mem_if_ddr3_emif_0_avl_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (mem_if_ddr3_emif_0_avl_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (mem_if_ddr3_emif_0_afi_clk_clk),                                      //       clk.clk
		.reset              (mem_if_ddr3_emif_0_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                                //       src.ready
		.src_valid          (router_005_src_valid),                                                //          .valid
		.src_data           (router_005_src_data),                                                 //          .data
		.src_channel        (router_005_src_channel),                                              //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                           //          .endofpacket
	);

	ddr_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (dma_0_control_port_slave_agent_rp_ready),               //      sink.ready
		.sink_valid         (dma_0_control_port_slave_agent_rp_valid),               //          .valid
		.sink_data          (dma_0_control_port_slave_agent_rp_data),                //          .data
		.sink_startofpacket (dma_0_control_port_slave_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (dma_0_control_port_slave_agent_rp_endofpacket),         //          .endofpacket
		.clk                (mem_if_ddr3_emif_0_afi_clk_clk),                        //       clk.clk
		.reset              (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                  //       src.ready
		.src_valid          (router_006_src_valid),                                  //          .valid
		.src_data           (router_006_src_data),                                   //          .data
		.src_channel        (router_006_src_channel),                                //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                             //          .endofpacket
	);

	ddr_mm_interconnect_0_router_006 router_007 (
		.sink_ready         (sysid_qsys_0_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysid_qsys_0_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysid_qsys_0_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysid_qsys_0_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_qsys_0_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (mem_if_ddr3_emif_0_afi_clk_clk),                    //       clk.clk
		.reset              (sysid_qsys_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_007_src_ready),                              //       src.ready
		.src_valid          (router_007_src_valid),                              //          .valid
		.src_data           (router_007_src_data),                               //          .data
		.src_channel        (router_007_src_channel),                            //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                         //          .endofpacket
	);

	ddr_mm_interconnect_0_router_006 router_008 (
		.sink_ready         (pio_0_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (pio_0_s1_agent_rp_valid),                 //          .valid
		.sink_data          (pio_0_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (pio_0_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (pio_0_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (mem_if_ddr3_emif_0_afi_clk_clk),          //       clk.clk
		.reset              (pio_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                    //       src.ready
		.src_valid          (router_008_src_valid),                    //          .valid
		.src_data           (router_008_src_data),                     //          .data
		.src_channel        (router_008_src_channel),                  //          .channel
		.src_startofpacket  (router_008_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)               //          .endofpacket
	);

	ddr_mm_interconnect_0_router_009 router_009 (
		.sink_ready         (onchip_memory2_0_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (onchip_memory2_0_s1_agent_rp_valid),                    //          .valid
		.sink_data          (onchip_memory2_0_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (onchip_memory2_0_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (onchip_memory2_0_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (mem_if_ddr3_emif_0_afi_clk_clk),                        //       clk.clk
		.reset              (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                                  //       src.ready
		.src_valid          (router_009_src_valid),                                  //          .valid
		.src_data           (router_009_src_data),                                   //          .data
		.src_channel        (router_009_src_channel),                                //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                             //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (104),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (101),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (32),
		.PIPELINED                 (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (5),
		.VALID_WIDTH               (5),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) mm_master_bfm_0_m0_limiter (
		.clk                    (mem_if_ddr3_emif_0_afi_clk_clk),                        //       clk.clk
		.reset                  (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                      //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                      //          .valid
		.cmd_sink_data          (router_src_data),                                       //          .data
		.cmd_sink_channel       (router_src_channel),                                    //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                              //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                //          .endofpacket
		.cmd_src_ready          (mm_master_bfm_0_m0_limiter_cmd_src_ready),              //   cmd_src.ready
		.cmd_src_data           (mm_master_bfm_0_m0_limiter_cmd_src_data),               //          .data
		.cmd_src_channel        (mm_master_bfm_0_m0_limiter_cmd_src_channel),            //          .channel
		.cmd_src_startofpacket  (mm_master_bfm_0_m0_limiter_cmd_src_startofpacket),      //          .startofpacket
		.cmd_src_endofpacket    (mm_master_bfm_0_m0_limiter_cmd_src_endofpacket),        //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                     //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                     //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                   //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                      //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                             //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                               //          .endofpacket
		.rsp_src_ready          (mm_master_bfm_0_m0_limiter_rsp_src_ready),              //   rsp_src.ready
		.rsp_src_valid          (mm_master_bfm_0_m0_limiter_rsp_src_valid),              //          .valid
		.rsp_src_data           (mm_master_bfm_0_m0_limiter_rsp_src_data),               //          .data
		.rsp_src_channel        (mm_master_bfm_0_m0_limiter_rsp_src_channel),            //          .channel
		.rsp_src_startofpacket  (mm_master_bfm_0_m0_limiter_rsp_src_startofpacket),      //          .startofpacket
		.rsp_src_endofpacket    (mm_master_bfm_0_m0_limiter_rsp_src_endofpacket),        //          .endofpacket
		.cmd_src_valid          (mm_master_bfm_0_m0_limiter_cmd_valid_data)              // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (104),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (101),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (32),
		.PIPELINED                 (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (5),
		.VALID_WIDTH               (5),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) mm_bridge_0_m0_limiter (
		.clk                    (mem_if_ddr3_emif_0_afi_clk_clk),                        //       clk.clk
		.reset                  (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                  //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                  //          .valid
		.cmd_sink_data          (router_001_src_data),                                   //          .data
		.cmd_sink_channel       (router_001_src_channel),                                //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                          //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                            //          .endofpacket
		.cmd_src_ready          (mm_bridge_0_m0_limiter_cmd_src_ready),                  //   cmd_src.ready
		.cmd_src_data           (mm_bridge_0_m0_limiter_cmd_src_data),                   //          .data
		.cmd_src_channel        (mm_bridge_0_m0_limiter_cmd_src_channel),                //          .channel
		.cmd_src_startofpacket  (mm_bridge_0_m0_limiter_cmd_src_startofpacket),          //          .startofpacket
		.cmd_src_endofpacket    (mm_bridge_0_m0_limiter_cmd_src_endofpacket),            //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                 //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                 //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                               //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                  //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                         //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                           //          .endofpacket
		.rsp_src_ready          (mm_bridge_0_m0_limiter_rsp_src_ready),                  //   rsp_src.ready
		.rsp_src_valid          (mm_bridge_0_m0_limiter_rsp_src_valid),                  //          .valid
		.rsp_src_data           (mm_bridge_0_m0_limiter_rsp_src_data),                   //          .data
		.rsp_src_channel        (mm_bridge_0_m0_limiter_rsp_src_channel),                //          .channel
		.rsp_src_startofpacket  (mm_bridge_0_m0_limiter_rsp_src_startofpacket),          //          .startofpacket
		.rsp_src_endofpacket    (mm_bridge_0_m0_limiter_rsp_src_endofpacket),            //          .endofpacket
		.cmd_src_valid          (mm_bridge_0_m0_limiter_cmd_valid_data)                  // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (104),
		.PKT_SRC_ID_H              (103),
		.PKT_SRC_ID_L              (101),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (32),
		.PIPELINED                 (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (5),
		.VALID_WIDTH               (5),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) master_0_master_limiter (
		.clk                    (mem_if_ddr3_emif_0_afi_clk_clk),                               //       clk.clk
		.reset                  (master_0_master_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                         //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                         //          .valid
		.cmd_sink_data          (router_002_src_data),                                          //          .data
		.cmd_sink_channel       (router_002_src_channel),                                       //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                                 //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                                   //          .endofpacket
		.cmd_src_ready          (master_0_master_limiter_cmd_src_ready),                        //   cmd_src.ready
		.cmd_src_data           (master_0_master_limiter_cmd_src_data),                         //          .data
		.cmd_src_channel        (master_0_master_limiter_cmd_src_channel),                      //          .channel
		.cmd_src_startofpacket  (master_0_master_limiter_cmd_src_startofpacket),                //          .startofpacket
		.cmd_src_endofpacket    (master_0_master_limiter_cmd_src_endofpacket),                  //          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                                        //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                                        //          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                                      //          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                                         //          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                                //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                                  //          .endofpacket
		.rsp_src_ready          (master_0_master_limiter_rsp_src_ready),                        //   rsp_src.ready
		.rsp_src_valid          (master_0_master_limiter_rsp_src_valid),                        //          .valid
		.rsp_src_data           (master_0_master_limiter_rsp_src_data),                         //          .data
		.rsp_src_channel        (master_0_master_limiter_rsp_src_channel),                      //          .channel
		.rsp_src_startofpacket  (master_0_master_limiter_rsp_src_startofpacket),                //          .startofpacket
		.rsp_src_endofpacket    (master_0_master_limiter_rsp_src_endofpacket),                  //          .endofpacket
		.cmd_src_valid          (master_0_master_limiter_cmd_valid_data)                        // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (87),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (1),
		.BURSTWRAP_CONST_MASK      (15),
		.BURSTWRAP_CONST_VALUE     (15),
		.ADAPTER_VERSION           ("13.1")
	) dma_0_control_port_slave_burst_adapter (
		.clk                   (mem_if_ddr3_emif_0_afi_clk_clk),                               //       cr0.clk
		.reset                 (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                        //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                         //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                      //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                                  //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                        //          .ready
		.source0_valid         (dma_0_control_port_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (dma_0_control_port_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (dma_0_control_port_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (dma_0_control_port_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (dma_0_control_port_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (dma_0_control_port_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (87),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (1),
		.BURSTWRAP_CONST_MASK      (15),
		.BURSTWRAP_CONST_VALUE     (15),
		.ADAPTER_VERSION           ("13.1")
	) sysid_qsys_0_control_slave_burst_adapter (
		.clk                   (mem_if_ddr3_emif_0_afi_clk_clk),                                 //       cr0.clk
		.reset                 (sysid_qsys_0_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                          //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                           //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                        //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                                    //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                          //          .ready
		.source0_valid         (sysid_qsys_0_control_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sysid_qsys_0_control_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (sysid_qsys_0_control_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sysid_qsys_0_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sysid_qsys_0_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sysid_qsys_0_control_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (87),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (1),
		.BURSTWRAP_CONST_MASK      (15),
		.BURSTWRAP_CONST_VALUE     (15),
		.ADAPTER_VERSION           ("13.1")
	) pio_0_s1_burst_adapter (
		.clk                   (mem_if_ddr3_emif_0_afi_clk_clk),               //       cr0.clk
		.reset                 (pio_0_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                        //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                         //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                      //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                  //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                        //          .ready
		.source0_valid         (pio_0_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pio_0_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (pio_0_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pio_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pio_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pio_0_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (72),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_BURST_TYPE_H          (69),
		.PKT_BURST_TYPE_L          (68),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (60),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (93),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (64),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (1),
		.BURSTWRAP_CONST_MASK      (15),
		.BURSTWRAP_CONST_VALUE     (15),
		.ADAPTER_VERSION           ("13.1")
	) onchip_memory2_0_s1_burst_adapter (
		.clk                   (mem_if_ddr3_emif_0_afi_clk_clk),                          //       cr0.clk
		.reset                 (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                                   //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                                    //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                                 //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                           //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                             //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                                   //          .ready
		.source0_valid         (onchip_memory2_0_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (onchip_memory2_0_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (onchip_memory2_0_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (onchip_memory2_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (onchip_memory2_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (onchip_memory2_0_s1_burst_adapter_source0_ready)          //          .ready
	);

	ddr_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (mem_if_ddr3_emif_0_afi_clk_clk),                        //        clk.clk
		.reset              (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (mm_master_bfm_0_m0_limiter_cmd_src_ready),              //       sink.ready
		.sink_channel       (mm_master_bfm_0_m0_limiter_cmd_src_channel),            //           .channel
		.sink_data          (mm_master_bfm_0_m0_limiter_cmd_src_data),               //           .data
		.sink_startofpacket (mm_master_bfm_0_m0_limiter_cmd_src_startofpacket),      //           .startofpacket
		.sink_endofpacket   (mm_master_bfm_0_m0_limiter_cmd_src_endofpacket),        //           .endofpacket
		.sink_valid         (mm_master_bfm_0_m0_limiter_cmd_valid_data),             // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                  //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                  //           .valid
		.src0_data          (cmd_demux_src0_data),                                   //           .data
		.src0_channel       (cmd_demux_src0_channel),                                //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                          //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                            //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                  //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                  //           .valid
		.src1_data          (cmd_demux_src1_data),                                   //           .data
		.src1_channel       (cmd_demux_src1_channel),                                //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                          //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                            //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                  //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                  //           .valid
		.src2_data          (cmd_demux_src2_data),                                   //           .data
		.src2_channel       (cmd_demux_src2_channel),                                //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                          //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                            //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                  //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                  //           .valid
		.src3_data          (cmd_demux_src3_data),                                   //           .data
		.src3_channel       (cmd_demux_src3_channel),                                //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                          //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                            //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                  //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                  //           .valid
		.src4_data          (cmd_demux_src4_data),                                   //           .data
		.src4_channel       (cmd_demux_src4_channel),                                //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                          //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket)                             //           .endofpacket
	);

	ddr_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (mem_if_ddr3_emif_0_afi_clk_clk),                        //        clk.clk
		.reset              (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (mm_bridge_0_m0_limiter_cmd_src_ready),                  //       sink.ready
		.sink_channel       (mm_bridge_0_m0_limiter_cmd_src_channel),                //           .channel
		.sink_data          (mm_bridge_0_m0_limiter_cmd_src_data),                   //           .data
		.sink_startofpacket (mm_bridge_0_m0_limiter_cmd_src_startofpacket),          //           .startofpacket
		.sink_endofpacket   (mm_bridge_0_m0_limiter_cmd_src_endofpacket),            //           .endofpacket
		.sink_valid         (mm_bridge_0_m0_limiter_cmd_valid_data),                 // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                              //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                              //           .valid
		.src0_data          (cmd_demux_001_src0_data),                               //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                            //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                      //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                        //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                              //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                              //           .valid
		.src1_data          (cmd_demux_001_src1_data),                               //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                            //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                      //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                        //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                              //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                              //           .valid
		.src2_data          (cmd_demux_001_src2_data),                               //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                            //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                      //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                        //           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                              //       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                              //           .valid
		.src3_data          (cmd_demux_001_src3_data),                               //           .data
		.src3_channel       (cmd_demux_001_src3_channel),                            //           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                      //           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),                        //           .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                              //       src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                              //           .valid
		.src4_data          (cmd_demux_001_src4_data),                               //           .data
		.src4_channel       (cmd_demux_001_src4_channel),                            //           .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),                      //           .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket)                         //           .endofpacket
	);

	ddr_mm_interconnect_0_cmd_demux cmd_demux_002 (
		.clk                (mem_if_ddr3_emif_0_afi_clk_clk),                               //        clk.clk
		.reset              (master_0_master_translator_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (master_0_master_limiter_cmd_src_ready),                        //       sink.ready
		.sink_channel       (master_0_master_limiter_cmd_src_channel),                      //           .channel
		.sink_data          (master_0_master_limiter_cmd_src_data),                         //           .data
		.sink_startofpacket (master_0_master_limiter_cmd_src_startofpacket),                //           .startofpacket
		.sink_endofpacket   (master_0_master_limiter_cmd_src_endofpacket),                  //           .endofpacket
		.sink_valid         (master_0_master_limiter_cmd_valid_data),                       // sink_valid.data
		.src0_ready         (cmd_demux_002_src0_ready),                                     //       src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                     //           .valid
		.src0_data          (cmd_demux_002_src0_data),                                      //           .data
		.src0_channel       (cmd_demux_002_src0_channel),                                   //           .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                             //           .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                               //           .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                                     //       src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                                     //           .valid
		.src1_data          (cmd_demux_002_src1_data),                                      //           .data
		.src1_channel       (cmd_demux_002_src1_channel),                                   //           .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),                             //           .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket),                               //           .endofpacket
		.src2_ready         (cmd_demux_002_src2_ready),                                     //       src2.ready
		.src2_valid         (cmd_demux_002_src2_valid),                                     //           .valid
		.src2_data          (cmd_demux_002_src2_data),                                      //           .data
		.src2_channel       (cmd_demux_002_src2_channel),                                   //           .channel
		.src2_startofpacket (cmd_demux_002_src2_startofpacket),                             //           .startofpacket
		.src2_endofpacket   (cmd_demux_002_src2_endofpacket),                               //           .endofpacket
		.src3_ready         (cmd_demux_002_src3_ready),                                     //       src3.ready
		.src3_valid         (cmd_demux_002_src3_valid),                                     //           .valid
		.src3_data          (cmd_demux_002_src3_data),                                      //           .data
		.src3_channel       (cmd_demux_002_src3_channel),                                   //           .channel
		.src3_startofpacket (cmd_demux_002_src3_startofpacket),                             //           .startofpacket
		.src3_endofpacket   (cmd_demux_002_src3_endofpacket),                               //           .endofpacket
		.src4_ready         (cmd_demux_002_src4_ready),                                     //       src4.ready
		.src4_valid         (cmd_demux_002_src4_valid),                                     //           .valid
		.src4_data          (cmd_demux_002_src4_data),                                      //           .data
		.src4_channel       (cmd_demux_002_src4_channel),                                   //           .channel
		.src4_startofpacket (cmd_demux_002_src4_startofpacket),                             //           .startofpacket
		.src4_endofpacket   (cmd_demux_002_src4_endofpacket)                                //           .endofpacket
	);

	ddr_mm_interconnect_0_cmd_demux_003 cmd_demux_003 (
		.clk                (mem_if_ddr3_emif_0_afi_clk_clk),                        //       clk.clk
		.reset              (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                  //      sink.ready
		.sink_channel       (router_003_src_channel),                                //          .channel
		.sink_data          (router_003_src_data),                                   //          .data
		.sink_startofpacket (router_003_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_003_src_valid),                                  //          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                              //      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                              //          .valid
		.src0_data          (cmd_demux_003_src0_data),                               //          .data
		.src0_channel       (cmd_demux_003_src0_channel),                            //          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket)                         //          .endofpacket
	);

	ddr_mm_interconnect_0_cmd_demux_003 cmd_demux_004 (
		.clk                (mem_if_ddr3_emif_0_afi_clk_clk),                        //       clk.clk
		.reset              (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                  //      sink.ready
		.sink_channel       (router_004_src_channel),                                //          .channel
		.sink_data          (router_004_src_data),                                   //          .data
		.sink_startofpacket (router_004_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_004_src_valid),                                  //          .valid
		.src0_ready         (cmd_demux_004_src0_ready),                              //      src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                              //          .valid
		.src0_data          (cmd_demux_004_src0_data),                               //          .data
		.src0_channel       (cmd_demux_004_src0_channel),                            //          .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket)                         //          .endofpacket
	);

	ddr_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (mem_if_ddr3_emif_0_afi_clk_clk),                                                   //       clk.clk
		.reset               (mem_if_ddr3_emif_0_avl_translator_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                                //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                                //          .valid
		.src_data            (cmd_mux_src_data),                                                                 //          .data
		.src_channel         (cmd_mux_src_channel),                                                              //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                                        //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                                          //          .endofpacket
		.sink0_ready         (mm_master_bfm_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (mm_master_bfm_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (mm_master_bfm_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (mm_master_bfm_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (mm_master_bfm_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (mm_master_bfm_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (mm_bridge_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_ready),             //     sink1.ready
		.sink1_valid         (mm_bridge_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_valid),             //          .valid
		.sink1_channel       (mm_bridge_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_channel),           //          .channel
		.sink1_data          (mm_bridge_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_data),              //          .data
		.sink1_startofpacket (mm_bridge_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_startofpacket),     //          .startofpacket
		.sink1_endofpacket   (mm_bridge_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_endofpacket),       //          .endofpacket
		.sink2_ready         (master_0_master_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_ready),            //     sink2.ready
		.sink2_valid         (master_0_master_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_valid),            //          .valid
		.sink2_channel       (master_0_master_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_channel),          //          .channel
		.sink2_data          (master_0_master_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_data),             //          .data
		.sink2_startofpacket (master_0_master_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_startofpacket),    //          .startofpacket
		.sink2_endofpacket   (master_0_master_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_endofpacket),      //          .endofpacket
		.sink3_ready         (cmd_demux_003_src0_ready),                                                         //     sink3.ready
		.sink3_valid         (cmd_demux_003_src0_valid),                                                         //          .valid
		.sink3_channel       (cmd_demux_003_src0_channel),                                                       //          .channel
		.sink3_data          (cmd_demux_003_src0_data),                                                          //          .data
		.sink3_startofpacket (cmd_demux_003_src0_startofpacket),                                                 //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src0_endofpacket)                                                    //          .endofpacket
	);

	ddr_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (mem_if_ddr3_emif_0_afi_clk_clk),                        //       clk.clk
		.reset               (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                 //          .valid
		.src_data            (cmd_mux_001_src_data),                                  //          .data
		.src_channel         (cmd_mux_001_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                //          .channel
		.sink0_data          (cmd_demux_src1_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                              //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                            //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                               //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket),                        //          .endofpacket
		.sink2_ready         (cmd_demux_002_src1_ready),                              //     sink2.ready
		.sink2_valid         (cmd_demux_002_src1_valid),                              //          .valid
		.sink2_channel       (cmd_demux_002_src1_channel),                            //          .channel
		.sink2_data          (cmd_demux_002_src1_data),                               //          .data
		.sink2_startofpacket (cmd_demux_002_src1_startofpacket),                      //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src1_endofpacket)                         //          .endofpacket
	);

	ddr_mm_interconnect_0_cmd_mux_001 cmd_mux_002 (
		.clk                 (mem_if_ddr3_emif_0_afi_clk_clk),                 //       clk.clk
		.reset               (sysid_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                          //          .valid
		.src_data            (cmd_mux_002_src_data),                           //          .data
		.src_channel         (cmd_mux_002_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                         //          .channel
		.sink0_data          (cmd_demux_src2_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket),                 //          .endofpacket
		.sink2_ready         (cmd_demux_002_src2_ready),                       //     sink2.ready
		.sink2_valid         (cmd_demux_002_src2_valid),                       //          .valid
		.sink2_channel       (cmd_demux_002_src2_channel),                     //          .channel
		.sink2_data          (cmd_demux_002_src2_data),                        //          .data
		.sink2_startofpacket (cmd_demux_002_src2_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src2_endofpacket)                  //          .endofpacket
	);

	ddr_mm_interconnect_0_cmd_mux_001 cmd_mux_003 (
		.clk                 (mem_if_ddr3_emif_0_afi_clk_clk),          //       clk.clk
		.reset               (pio_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                   //          .valid
		.src_data            (cmd_mux_003_src_data),                    //          .data
		.src_channel         (cmd_mux_003_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                  //          .channel
		.sink0_data          (cmd_demux_src3_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),              //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                 //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket),          //          .endofpacket
		.sink2_ready         (cmd_demux_002_src3_ready),                //     sink2.ready
		.sink2_valid         (cmd_demux_002_src3_valid),                //          .valid
		.sink2_channel       (cmd_demux_002_src3_channel),              //          .channel
		.sink2_data          (cmd_demux_002_src3_data),                 //          .data
		.sink2_startofpacket (cmd_demux_002_src3_startofpacket),        //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src3_endofpacket)           //          .endofpacket
	);

	ddr_mm_interconnect_0_cmd_mux_004 cmd_mux_004 (
		.clk                 (mem_if_ddr3_emif_0_afi_clk_clk),                                                //       clk.clk
		.reset               (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                                         //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                                         //          .valid
		.src_data            (cmd_mux_004_src_data),                                                          //          .data
		.src_channel         (cmd_mux_004_src_channel),                                                       //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                                                   //          .endofpacket
		.sink0_ready         (mm_master_bfm_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (mm_master_bfm_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (mm_master_bfm_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (mm_master_bfm_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (mm_master_bfm_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (mm_master_bfm_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (mm_bridge_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_ready),             //     sink1.ready
		.sink1_valid         (mm_bridge_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_valid),             //          .valid
		.sink1_channel       (mm_bridge_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_channel),           //          .channel
		.sink1_data          (mm_bridge_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_data),              //          .data
		.sink1_startofpacket (mm_bridge_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket),     //          .startofpacket
		.sink1_endofpacket   (mm_bridge_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket),       //          .endofpacket
		.sink2_ready         (master_0_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_ready),            //     sink2.ready
		.sink2_valid         (master_0_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_valid),            //          .valid
		.sink2_channel       (master_0_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_channel),          //          .channel
		.sink2_data          (master_0_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_data),             //          .data
		.sink2_startofpacket (master_0_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket),    //          .startofpacket
		.sink2_endofpacket   (master_0_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket),      //          .endofpacket
		.sink3_ready         (dma_0_read_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_ready),          //     sink3.ready
		.sink3_valid         (dma_0_read_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_valid),          //          .valid
		.sink3_channel       (dma_0_read_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_channel),        //          .channel
		.sink3_data          (dma_0_read_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_data),           //          .data
		.sink3_startofpacket (dma_0_read_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket),  //          .startofpacket
		.sink3_endofpacket   (dma_0_read_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket)     //          .endofpacket
	);

	ddr_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (mem_if_ddr3_emif_0_afi_clk_clk),                                      //       clk.clk
		.reset              (mem_if_ddr3_emif_0_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                                //      sink.ready
		.sink_channel       (router_005_src_channel),                                              //          .channel
		.sink_data          (router_005_src_data),                                                 //          .data
		.sink_startofpacket (router_005_src_startofpacket),                                        //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                                          //          .endofpacket
		.sink_valid         (router_005_src_valid),                                                //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                                //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                                //          .valid
		.src0_data          (rsp_demux_src0_data),                                                 //          .data
		.src0_channel       (rsp_demux_src0_channel),                                              //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                          //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                                //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                                //          .valid
		.src1_data          (rsp_demux_src1_data),                                                 //          .data
		.src1_channel       (rsp_demux_src1_channel),                                              //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                        //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                                          //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                                                //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                                                //          .valid
		.src2_data          (rsp_demux_src2_data),                                                 //          .data
		.src2_channel       (rsp_demux_src2_channel),                                              //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                                        //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket),                                          //          .endofpacket
		.src3_ready         (rsp_demux_src3_ready),                                                //      src3.ready
		.src3_valid         (rsp_demux_src3_valid),                                                //          .valid
		.src3_data          (rsp_demux_src3_data),                                                 //          .data
		.src3_channel       (rsp_demux_src3_channel),                                              //          .channel
		.src3_startofpacket (rsp_demux_src3_startofpacket),                                        //          .startofpacket
		.src3_endofpacket   (rsp_demux_src3_endofpacket)                                           //          .endofpacket
	);

	ddr_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (mem_if_ddr3_emif_0_afi_clk_clk),                        //       clk.clk
		.reset              (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                  //      sink.ready
		.sink_channel       (router_006_src_channel),                                //          .channel
		.sink_data          (router_006_src_data),                                   //          .data
		.sink_startofpacket (router_006_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_006_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_001_src0_data),                               //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_001_src1_data),                               //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket),                        //          .endofpacket
		.src2_ready         (rsp_demux_001_src2_ready),                              //      src2.ready
		.src2_valid         (rsp_demux_001_src2_valid),                              //          .valid
		.src2_data          (rsp_demux_001_src2_data),                               //          .data
		.src2_channel       (rsp_demux_001_src2_channel),                            //          .channel
		.src2_startofpacket (rsp_demux_001_src2_startofpacket),                      //          .startofpacket
		.src2_endofpacket   (rsp_demux_001_src2_endofpacket)                         //          .endofpacket
	);

	ddr_mm_interconnect_0_rsp_demux_001 rsp_demux_002 (
		.clk                (mem_if_ddr3_emif_0_afi_clk_clk),                 //       clk.clk
		.reset              (sysid_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                           //      sink.ready
		.sink_channel       (router_007_src_channel),                         //          .channel
		.sink_data          (router_007_src_data),                            //          .data
		.sink_startofpacket (router_007_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_007_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_002_src0_data),                        //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_002_src1_data),                        //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_demux_002_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_demux_002_src2_valid),                       //          .valid
		.src2_data          (rsp_demux_002_src2_data),                        //          .data
		.src2_channel       (rsp_demux_002_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_demux_002_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_demux_002_src2_endofpacket)                  //          .endofpacket
	);

	ddr_mm_interconnect_0_rsp_demux_001 rsp_demux_003 (
		.clk                (mem_if_ddr3_emif_0_afi_clk_clk),          //       clk.clk
		.reset              (pio_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                    //      sink.ready
		.sink_channel       (router_008_src_channel),                  //          .channel
		.sink_data          (router_008_src_data),                     //          .data
		.sink_startofpacket (router_008_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_008_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                //          .valid
		.src0_data          (rsp_demux_003_src0_data),                 //          .data
		.src0_channel       (rsp_demux_003_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                //          .valid
		.src1_data          (rsp_demux_003_src1_data),                 //          .data
		.src1_channel       (rsp_demux_003_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket),          //          .endofpacket
		.src2_ready         (rsp_demux_003_src2_ready),                //      src2.ready
		.src2_valid         (rsp_demux_003_src2_valid),                //          .valid
		.src2_data          (rsp_demux_003_src2_data),                 //          .data
		.src2_channel       (rsp_demux_003_src2_channel),              //          .channel
		.src2_startofpacket (rsp_demux_003_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket   (rsp_demux_003_src2_endofpacket)           //          .endofpacket
	);

	ddr_mm_interconnect_0_rsp_demux_004 rsp_demux_004 (
		.clk                (mem_if_ddr3_emif_0_afi_clk_clk),                        //       clk.clk
		.reset              (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                                  //      sink.ready
		.sink_channel       (router_009_src_channel),                                //          .channel
		.sink_data          (router_009_src_data),                                   //          .data
		.sink_startofpacket (router_009_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_009_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_004_src0_data),                               //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_004_src1_data),                               //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket),                        //          .endofpacket
		.src2_ready         (rsp_demux_004_src2_ready),                              //      src2.ready
		.src2_valid         (rsp_demux_004_src2_valid),                              //          .valid
		.src2_data          (rsp_demux_004_src2_data),                               //          .data
		.src2_channel       (rsp_demux_004_src2_channel),                            //          .channel
		.src2_startofpacket (rsp_demux_004_src2_startofpacket),                      //          .startofpacket
		.src2_endofpacket   (rsp_demux_004_src2_endofpacket),                        //          .endofpacket
		.src3_ready         (rsp_demux_004_src3_ready),                              //      src3.ready
		.src3_valid         (rsp_demux_004_src3_valid),                              //          .valid
		.src3_data          (rsp_demux_004_src3_data),                               //          .data
		.src3_channel       (rsp_demux_004_src3_channel),                            //          .channel
		.src3_startofpacket (rsp_demux_004_src3_startofpacket),                      //          .startofpacket
		.src3_endofpacket   (rsp_demux_004_src3_endofpacket)                         //          .endofpacket
	);

	ddr_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (mem_if_ddr3_emif_0_afi_clk_clk),                                                   //       clk.clk
		.reset               (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                                //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                                //          .valid
		.src_data            (rsp_mux_src_data),                                                                 //          .data
		.src_channel         (rsp_mux_src_channel),                                                              //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                                        //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                                          //          .endofpacket
		.sink0_ready         (mem_if_ddr3_emif_0_avl_to_mm_master_bfm_0_m0_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (mem_if_ddr3_emif_0_avl_to_mm_master_bfm_0_m0_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (mem_if_ddr3_emif_0_avl_to_mm_master_bfm_0_m0_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (mem_if_ddr3_emif_0_avl_to_mm_master_bfm_0_m0_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (mem_if_ddr3_emif_0_avl_to_mm_master_bfm_0_m0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (mem_if_ddr3_emif_0_avl_to_mm_master_bfm_0_m0_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                                         //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                                         //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                                       //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                                          //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                                                 //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                                                   //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                                         //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                                         //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                                                       //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                                          //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                                                 //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                                                   //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                                                         //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                                                         //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                                                       //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                                                          //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                                                 //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                                                   //          .endofpacket
		.sink4_ready         (onchip_memory2_0_s1_to_mm_master_bfm_0_m0_rsp_width_adapter_src_ready),            //     sink4.ready
		.sink4_valid         (onchip_memory2_0_s1_to_mm_master_bfm_0_m0_rsp_width_adapter_src_valid),            //          .valid
		.sink4_channel       (onchip_memory2_0_s1_to_mm_master_bfm_0_m0_rsp_width_adapter_src_channel),          //          .channel
		.sink4_data          (onchip_memory2_0_s1_to_mm_master_bfm_0_m0_rsp_width_adapter_src_data),             //          .data
		.sink4_startofpacket (onchip_memory2_0_s1_to_mm_master_bfm_0_m0_rsp_width_adapter_src_startofpacket),    //          .startofpacket
		.sink4_endofpacket   (onchip_memory2_0_s1_to_mm_master_bfm_0_m0_rsp_width_adapter_src_endofpacket)       //          .endofpacket
	);

	ddr_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (mem_if_ddr3_emif_0_afi_clk_clk),                                               //       clk.clk
		.reset               (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                                        //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                                        //          .valid
		.src_data            (rsp_mux_001_src_data),                                                         //          .data
		.src_channel         (rsp_mux_001_src_channel),                                                      //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                                //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                                  //          .endofpacket
		.sink0_ready         (mem_if_ddr3_emif_0_avl_to_mm_bridge_0_m0_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (mem_if_ddr3_emif_0_avl_to_mm_bridge_0_m0_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (mem_if_ddr3_emif_0_avl_to_mm_bridge_0_m0_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (mem_if_ddr3_emif_0_avl_to_mm_bridge_0_m0_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (mem_if_ddr3_emif_0_avl_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (mem_if_ddr3_emif_0_avl_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (rsp_demux_001_src1_ready),                                                     //     sink1.ready
		.sink1_valid         (rsp_demux_001_src1_valid),                                                     //          .valid
		.sink1_channel       (rsp_demux_001_src1_channel),                                                   //          .channel
		.sink1_data          (rsp_demux_001_src1_data),                                                      //          .data
		.sink1_startofpacket (rsp_demux_001_src1_startofpacket),                                             //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src1_endofpacket),                                               //          .endofpacket
		.sink2_ready         (rsp_demux_002_src1_ready),                                                     //     sink2.ready
		.sink2_valid         (rsp_demux_002_src1_valid),                                                     //          .valid
		.sink2_channel       (rsp_demux_002_src1_channel),                                                   //          .channel
		.sink2_data          (rsp_demux_002_src1_data),                                                      //          .data
		.sink2_startofpacket (rsp_demux_002_src1_startofpacket),                                             //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src1_endofpacket),                                               //          .endofpacket
		.sink3_ready         (rsp_demux_003_src1_ready),                                                     //     sink3.ready
		.sink3_valid         (rsp_demux_003_src1_valid),                                                     //          .valid
		.sink3_channel       (rsp_demux_003_src1_channel),                                                   //          .channel
		.sink3_data          (rsp_demux_003_src1_data),                                                      //          .data
		.sink3_startofpacket (rsp_demux_003_src1_startofpacket),                                             //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src1_endofpacket),                                               //          .endofpacket
		.sink4_ready         (onchip_memory2_0_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_ready),            //     sink4.ready
		.sink4_valid         (onchip_memory2_0_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_valid),            //          .valid
		.sink4_channel       (onchip_memory2_0_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_channel),          //          .channel
		.sink4_data          (onchip_memory2_0_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_data),             //          .data
		.sink4_startofpacket (onchip_memory2_0_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket),    //          .startofpacket
		.sink4_endofpacket   (onchip_memory2_0_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket)       //          .endofpacket
	);

	ddr_mm_interconnect_0_rsp_mux rsp_mux_002 (
		.clk                 (mem_if_ddr3_emif_0_afi_clk_clk),                                                //       clk.clk
		.reset               (master_0_master_translator_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                                         //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                                         //          .valid
		.src_data            (rsp_mux_002_src_data),                                                          //          .data
		.src_channel         (rsp_mux_002_src_channel),                                                       //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                                                 //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                                                   //          .endofpacket
		.sink0_ready         (mem_if_ddr3_emif_0_avl_to_master_0_master_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (mem_if_ddr3_emif_0_avl_to_master_0_master_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (mem_if_ddr3_emif_0_avl_to_master_0_master_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (mem_if_ddr3_emif_0_avl_to_master_0_master_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (mem_if_ddr3_emif_0_avl_to_master_0_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (mem_if_ddr3_emif_0_avl_to_master_0_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (rsp_demux_001_src2_ready),                                                      //     sink1.ready
		.sink1_valid         (rsp_demux_001_src2_valid),                                                      //          .valid
		.sink1_channel       (rsp_demux_001_src2_channel),                                                    //          .channel
		.sink1_data          (rsp_demux_001_src2_data),                                                       //          .data
		.sink1_startofpacket (rsp_demux_001_src2_startofpacket),                                              //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src2_endofpacket),                                                //          .endofpacket
		.sink2_ready         (rsp_demux_002_src2_ready),                                                      //     sink2.ready
		.sink2_valid         (rsp_demux_002_src2_valid),                                                      //          .valid
		.sink2_channel       (rsp_demux_002_src2_channel),                                                    //          .channel
		.sink2_data          (rsp_demux_002_src2_data),                                                       //          .data
		.sink2_startofpacket (rsp_demux_002_src2_startofpacket),                                              //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src2_endofpacket),                                                //          .endofpacket
		.sink3_ready         (rsp_demux_003_src2_ready),                                                      //     sink3.ready
		.sink3_valid         (rsp_demux_003_src2_valid),                                                      //          .valid
		.sink3_channel       (rsp_demux_003_src2_channel),                                                    //          .channel
		.sink3_data          (rsp_demux_003_src2_data),                                                       //          .data
		.sink3_startofpacket (rsp_demux_003_src2_startofpacket),                                              //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src2_endofpacket),                                                //          .endofpacket
		.sink4_ready         (onchip_memory2_0_s1_to_master_0_master_rsp_width_adapter_src_ready),            //     sink4.ready
		.sink4_valid         (onchip_memory2_0_s1_to_master_0_master_rsp_width_adapter_src_valid),            //          .valid
		.sink4_channel       (onchip_memory2_0_s1_to_master_0_master_rsp_width_adapter_src_channel),          //          .channel
		.sink4_data          (onchip_memory2_0_s1_to_master_0_master_rsp_width_adapter_src_data),             //          .data
		.sink4_startofpacket (onchip_memory2_0_s1_to_master_0_master_rsp_width_adapter_src_startofpacket),    //          .startofpacket
		.sink4_endofpacket   (onchip_memory2_0_s1_to_master_0_master_rsp_width_adapter_src_endofpacket)       //          .endofpacket
	);

	ddr_mm_interconnect_0_rsp_mux_003 rsp_mux_003 (
		.clk                 (mem_if_ddr3_emif_0_afi_clk_clk),                        //       clk.clk
		.reset               (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                                 //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                                 //          .valid
		.src_data            (rsp_mux_003_src_data),                                  //          .data
		.src_channel         (rsp_mux_003_src_channel),                               //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (rsp_demux_src3_ready),                                  //     sink0.ready
		.sink0_valid         (rsp_demux_src3_valid),                                  //          .valid
		.sink0_channel       (rsp_demux_src3_channel),                                //          .channel
		.sink0_data          (rsp_demux_src3_data),                                   //          .data
		.sink0_startofpacket (rsp_demux_src3_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src3_endofpacket)                             //          .endofpacket
	);

	ddr_mm_interconnect_0_rsp_mux_003 rsp_mux_004 (
		.clk                 (mem_if_ddr3_emif_0_afi_clk_clk),                                               //       clk.clk
		.reset               (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                                                        //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                                                        //          .valid
		.src_data            (rsp_mux_004_src_data),                                                         //          .data
		.src_channel         (rsp_mux_004_src_channel),                                                      //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),                                                //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),                                                  //          .endofpacket
		.sink0_ready         (onchip_memory2_0_s1_to_dma_0_read_master_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (onchip_memory2_0_s1_to_dma_0_read_master_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (onchip_memory2_0_s1_to_dma_0_read_master_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (onchip_memory2_0_s1_to_dma_0_read_master_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (onchip_memory2_0_s1_to_dma_0_read_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (onchip_memory2_0_s1_to_dma_0_read_master_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (86),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (87),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (116),
		.IN_PKT_RESPONSE_STATUS_L      (115),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (117),
		.IN_PKT_ORI_BURST_SIZE_H       (119),
		.IN_ST_DATA_W                  (120),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (122),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (130),
		.OUT_PKT_BURST_SIZE_L          (128),
		.OUT_PKT_RESPONSE_STATUS_H     (152),
		.OUT_PKT_RESPONSE_STATUS_L     (151),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (132),
		.OUT_PKT_BURST_TYPE_L          (131),
		.OUT_PKT_ORI_BURST_SIZE_L      (153),
		.OUT_PKT_ORI_BURST_SIZE_H      (155),
		.OUT_ST_DATA_W                 (156),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) mm_master_bfm_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter (
		.clk                  (mem_if_ddr3_emif_0_afi_clk_clk),                                                   //       clk.clk
		.reset                (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_valid             (cmd_demux_src0_valid),                                                             //      sink.valid
		.in_channel           (cmd_demux_src0_channel),                                                           //          .channel
		.in_startofpacket     (cmd_demux_src0_startofpacket),                                                     //          .startofpacket
		.in_endofpacket       (cmd_demux_src0_endofpacket),                                                       //          .endofpacket
		.in_ready             (cmd_demux_src0_ready),                                                             //          .ready
		.in_data              (cmd_demux_src0_data),                                                              //          .data
		.out_endofpacket      (mm_master_bfm_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (mm_master_bfm_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_data),          //          .data
		.out_channel          (mm_master_bfm_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (mm_master_bfm_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (mm_master_bfm_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (mm_master_bfm_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (86),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (87),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (116),
		.IN_PKT_RESPONSE_STATUS_L      (115),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (117),
		.IN_PKT_ORI_BURST_SIZE_H       (119),
		.IN_ST_DATA_W                  (120),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (59),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (67),
		.OUT_PKT_BURST_SIZE_L          (65),
		.OUT_PKT_RESPONSE_STATUS_H     (89),
		.OUT_PKT_RESPONSE_STATUS_L     (88),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (69),
		.OUT_PKT_BURST_TYPE_L          (68),
		.OUT_PKT_ORI_BURST_SIZE_L      (90),
		.OUT_PKT_ORI_BURST_SIZE_H      (92),
		.OUT_ST_DATA_W                 (93),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) mm_master_bfm_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter (
		.clk                  (mem_if_ddr3_emif_0_afi_clk_clk),                                                //       clk.clk
		.reset                (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (cmd_demux_src4_valid),                                                          //      sink.valid
		.in_channel           (cmd_demux_src4_channel),                                                        //          .channel
		.in_startofpacket     (cmd_demux_src4_startofpacket),                                                  //          .startofpacket
		.in_endofpacket       (cmd_demux_src4_endofpacket),                                                    //          .endofpacket
		.in_ready             (cmd_demux_src4_ready),                                                          //          .ready
		.in_data              (cmd_demux_src4_data),                                                           //          .data
		.out_endofpacket      (mm_master_bfm_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (mm_master_bfm_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (mm_master_bfm_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (mm_master_bfm_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (mm_master_bfm_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (mm_master_bfm_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (86),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (87),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (116),
		.IN_PKT_RESPONSE_STATUS_L      (115),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (117),
		.IN_PKT_ORI_BURST_SIZE_H       (119),
		.IN_ST_DATA_W                  (120),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (122),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (130),
		.OUT_PKT_BURST_SIZE_L          (128),
		.OUT_PKT_RESPONSE_STATUS_H     (152),
		.OUT_PKT_RESPONSE_STATUS_L     (151),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (132),
		.OUT_PKT_BURST_TYPE_L          (131),
		.OUT_PKT_ORI_BURST_SIZE_L      (153),
		.OUT_PKT_ORI_BURST_SIZE_H      (155),
		.OUT_ST_DATA_W                 (156),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) mm_bridge_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter (
		.clk                  (mem_if_ddr3_emif_0_afi_clk_clk),                                               //       clk.clk
		.reset                (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_valid             (cmd_demux_001_src0_valid),                                                     //      sink.valid
		.in_channel           (cmd_demux_001_src0_channel),                                                   //          .channel
		.in_startofpacket     (cmd_demux_001_src0_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src0_endofpacket),                                               //          .endofpacket
		.in_ready             (cmd_demux_001_src0_ready),                                                     //          .ready
		.in_data              (cmd_demux_001_src0_data),                                                      //          .data
		.out_endofpacket      (mm_bridge_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (mm_bridge_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_data),          //          .data
		.out_channel          (mm_bridge_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (mm_bridge_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (mm_bridge_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (mm_bridge_0_m0_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (86),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (87),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (116),
		.IN_PKT_RESPONSE_STATUS_L      (115),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (117),
		.IN_PKT_ORI_BURST_SIZE_H       (119),
		.IN_ST_DATA_W                  (120),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (59),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (67),
		.OUT_PKT_BURST_SIZE_L          (65),
		.OUT_PKT_RESPONSE_STATUS_H     (89),
		.OUT_PKT_RESPONSE_STATUS_L     (88),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (69),
		.OUT_PKT_BURST_TYPE_L          (68),
		.OUT_PKT_ORI_BURST_SIZE_L      (90),
		.OUT_PKT_ORI_BURST_SIZE_H      (92),
		.OUT_ST_DATA_W                 (93),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) mm_bridge_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter (
		.clk                  (mem_if_ddr3_emif_0_afi_clk_clk),                                            //       clk.clk
		.reset                (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_valid             (cmd_demux_001_src4_valid),                                                  //      sink.valid
		.in_channel           (cmd_demux_001_src4_channel),                                                //          .channel
		.in_startofpacket     (cmd_demux_001_src4_startofpacket),                                          //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src4_endofpacket),                                            //          .endofpacket
		.in_ready             (cmd_demux_001_src4_ready),                                                  //          .ready
		.in_data              (cmd_demux_001_src4_data),                                                   //          .data
		.out_endofpacket      (mm_bridge_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (mm_bridge_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (mm_bridge_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (mm_bridge_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (mm_bridge_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (mm_bridge_0_m0_to_onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (86),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (87),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (116),
		.IN_PKT_RESPONSE_STATUS_L      (115),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (117),
		.IN_PKT_ORI_BURST_SIZE_H       (119),
		.IN_ST_DATA_W                  (120),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (122),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (130),
		.OUT_PKT_BURST_SIZE_L          (128),
		.OUT_PKT_RESPONSE_STATUS_H     (152),
		.OUT_PKT_RESPONSE_STATUS_L     (151),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (132),
		.OUT_PKT_BURST_TYPE_L          (131),
		.OUT_PKT_ORI_BURST_SIZE_L      (153),
		.OUT_PKT_ORI_BURST_SIZE_H      (155),
		.OUT_ST_DATA_W                 (156),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) master_0_master_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter (
		.clk                  (mem_if_ddr3_emif_0_afi_clk_clk),                                                //       clk.clk
		.reset                (master_0_master_translator_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (cmd_demux_002_src0_valid),                                                      //      sink.valid
		.in_channel           (cmd_demux_002_src0_channel),                                                    //          .channel
		.in_startofpacket     (cmd_demux_002_src0_startofpacket),                                              //          .startofpacket
		.in_endofpacket       (cmd_demux_002_src0_endofpacket),                                                //          .endofpacket
		.in_ready             (cmd_demux_002_src0_ready),                                                      //          .ready
		.in_data              (cmd_demux_002_src0_data),                                                       //          .data
		.out_endofpacket      (master_0_master_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (master_0_master_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_data),          //          .data
		.out_channel          (master_0_master_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (master_0_master_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (master_0_master_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (master_0_master_to_mem_if_ddr3_emif_0_avl_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (86),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (87),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (116),
		.IN_PKT_RESPONSE_STATUS_L      (115),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (117),
		.IN_PKT_ORI_BURST_SIZE_H       (119),
		.IN_ST_DATA_W                  (120),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (59),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (67),
		.OUT_PKT_BURST_SIZE_L          (65),
		.OUT_PKT_RESPONSE_STATUS_H     (89),
		.OUT_PKT_RESPONSE_STATUS_L     (88),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (69),
		.OUT_PKT_BURST_TYPE_L          (68),
		.OUT_PKT_ORI_BURST_SIZE_L      (90),
		.OUT_PKT_ORI_BURST_SIZE_H      (92),
		.OUT_ST_DATA_W                 (93),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) master_0_master_to_onchip_memory2_0_s1_cmd_width_adapter (
		.clk                  (mem_if_ddr3_emif_0_afi_clk_clk),                                             //       clk.clk
		.reset                (master_0_master_translator_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_valid             (cmd_demux_002_src4_valid),                                                   //      sink.valid
		.in_channel           (cmd_demux_002_src4_channel),                                                 //          .channel
		.in_startofpacket     (cmd_demux_002_src4_startofpacket),                                           //          .startofpacket
		.in_endofpacket       (cmd_demux_002_src4_endofpacket),                                             //          .endofpacket
		.in_ready             (cmd_demux_002_src4_ready),                                                   //          .ready
		.in_data              (cmd_demux_002_src4_data),                                                    //          .data
		.out_endofpacket      (master_0_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (master_0_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (master_0_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (master_0_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (master_0_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (master_0_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (122),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (127),
		.IN_PKT_BURSTWRAP_L            (123),
		.IN_PKT_BURST_SIZE_H           (130),
		.IN_PKT_BURST_SIZE_L           (128),
		.IN_PKT_RESPONSE_STATUS_H      (152),
		.IN_PKT_RESPONSE_STATUS_L      (151),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (132),
		.IN_PKT_BURST_TYPE_L           (131),
		.IN_PKT_ORI_BURST_SIZE_L       (153),
		.IN_PKT_ORI_BURST_SIZE_H       (155),
		.IN_ST_DATA_W                  (156),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (59),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (67),
		.OUT_PKT_BURST_SIZE_L          (65),
		.OUT_PKT_RESPONSE_STATUS_H     (89),
		.OUT_PKT_RESPONSE_STATUS_L     (88),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (69),
		.OUT_PKT_BURST_TYPE_L          (68),
		.OUT_PKT_ORI_BURST_SIZE_L      (90),
		.OUT_PKT_ORI_BURST_SIZE_H      (92),
		.OUT_ST_DATA_W                 (93),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_0_read_master_to_onchip_memory2_0_s1_cmd_width_adapter (
		.clk                  (mem_if_ddr3_emif_0_afi_clk_clk),                                               //       clk.clk
		.reset                (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_valid             (cmd_demux_004_src0_valid),                                                     //      sink.valid
		.in_channel           (cmd_demux_004_src0_channel),                                                   //          .channel
		.in_startofpacket     (cmd_demux_004_src0_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (cmd_demux_004_src0_endofpacket),                                               //          .endofpacket
		.in_ready             (cmd_demux_004_src0_ready),                                                     //          .ready
		.in_data              (cmd_demux_004_src0_data),                                                      //          .data
		.out_endofpacket      (dma_0_read_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_0_read_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (dma_0_read_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_0_read_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_0_read_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_0_read_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (122),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (127),
		.IN_PKT_BURSTWRAP_L            (123),
		.IN_PKT_BURST_SIZE_H           (130),
		.IN_PKT_BURST_SIZE_L           (128),
		.IN_PKT_RESPONSE_STATUS_H      (152),
		.IN_PKT_RESPONSE_STATUS_L      (151),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (132),
		.IN_PKT_BURST_TYPE_L           (131),
		.IN_PKT_ORI_BURST_SIZE_L       (153),
		.IN_PKT_ORI_BURST_SIZE_H       (155),
		.IN_ST_DATA_W                  (156),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (86),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (116),
		.OUT_PKT_RESPONSE_STATUS_L     (115),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (117),
		.OUT_PKT_ORI_BURST_SIZE_H      (119),
		.OUT_ST_DATA_W                 (120),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) mem_if_ddr3_emif_0_avl_to_mm_master_bfm_0_m0_rsp_width_adapter (
		.clk                  (mem_if_ddr3_emif_0_afi_clk_clk),                                                   //       clk.clk
		.reset                (mem_if_ddr3_emif_0_avl_translator_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_valid             (rsp_demux_src0_valid),                                                             //      sink.valid
		.in_channel           (rsp_demux_src0_channel),                                                           //          .channel
		.in_startofpacket     (rsp_demux_src0_startofpacket),                                                     //          .startofpacket
		.in_endofpacket       (rsp_demux_src0_endofpacket),                                                       //          .endofpacket
		.in_ready             (rsp_demux_src0_ready),                                                             //          .ready
		.in_data              (rsp_demux_src0_data),                                                              //          .data
		.out_endofpacket      (mem_if_ddr3_emif_0_avl_to_mm_master_bfm_0_m0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (mem_if_ddr3_emif_0_avl_to_mm_master_bfm_0_m0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (mem_if_ddr3_emif_0_avl_to_mm_master_bfm_0_m0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (mem_if_ddr3_emif_0_avl_to_mm_master_bfm_0_m0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (mem_if_ddr3_emif_0_avl_to_mm_master_bfm_0_m0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (mem_if_ddr3_emif_0_avl_to_mm_master_bfm_0_m0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (122),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (127),
		.IN_PKT_BURSTWRAP_L            (123),
		.IN_PKT_BURST_SIZE_H           (130),
		.IN_PKT_BURST_SIZE_L           (128),
		.IN_PKT_RESPONSE_STATUS_H      (152),
		.IN_PKT_RESPONSE_STATUS_L      (151),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (132),
		.IN_PKT_BURST_TYPE_L           (131),
		.IN_PKT_ORI_BURST_SIZE_L       (153),
		.IN_PKT_ORI_BURST_SIZE_H       (155),
		.IN_ST_DATA_W                  (156),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (86),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (116),
		.OUT_PKT_RESPONSE_STATUS_L     (115),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (117),
		.OUT_PKT_ORI_BURST_SIZE_H      (119),
		.OUT_ST_DATA_W                 (120),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) mem_if_ddr3_emif_0_avl_to_mm_bridge_0_m0_rsp_width_adapter (
		.clk                  (mem_if_ddr3_emif_0_afi_clk_clk),                                               //       clk.clk
		.reset                (mem_if_ddr3_emif_0_avl_translator_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_valid             (rsp_demux_src1_valid),                                                         //      sink.valid
		.in_channel           (rsp_demux_src1_channel),                                                       //          .channel
		.in_startofpacket     (rsp_demux_src1_startofpacket),                                                 //          .startofpacket
		.in_endofpacket       (rsp_demux_src1_endofpacket),                                                   //          .endofpacket
		.in_ready             (rsp_demux_src1_ready),                                                         //          .ready
		.in_data              (rsp_demux_src1_data),                                                          //          .data
		.out_endofpacket      (mem_if_ddr3_emif_0_avl_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (mem_if_ddr3_emif_0_avl_to_mm_bridge_0_m0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (mem_if_ddr3_emif_0_avl_to_mm_bridge_0_m0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (mem_if_ddr3_emif_0_avl_to_mm_bridge_0_m0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (mem_if_ddr3_emif_0_avl_to_mm_bridge_0_m0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (mem_if_ddr3_emif_0_avl_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (122),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (127),
		.IN_PKT_BURSTWRAP_L            (123),
		.IN_PKT_BURST_SIZE_H           (130),
		.IN_PKT_BURST_SIZE_L           (128),
		.IN_PKT_RESPONSE_STATUS_H      (152),
		.IN_PKT_RESPONSE_STATUS_L      (151),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (132),
		.IN_PKT_BURST_TYPE_L           (131),
		.IN_PKT_ORI_BURST_SIZE_L       (153),
		.IN_PKT_ORI_BURST_SIZE_H       (155),
		.IN_ST_DATA_W                  (156),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (86),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (116),
		.OUT_PKT_RESPONSE_STATUS_L     (115),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (117),
		.OUT_PKT_ORI_BURST_SIZE_H      (119),
		.OUT_ST_DATA_W                 (120),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) mem_if_ddr3_emif_0_avl_to_master_0_master_rsp_width_adapter (
		.clk                  (mem_if_ddr3_emif_0_afi_clk_clk),                                                //       clk.clk
		.reset                (mem_if_ddr3_emif_0_avl_translator_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_valid             (rsp_demux_src2_valid),                                                          //      sink.valid
		.in_channel           (rsp_demux_src2_channel),                                                        //          .channel
		.in_startofpacket     (rsp_demux_src2_startofpacket),                                                  //          .startofpacket
		.in_endofpacket       (rsp_demux_src2_endofpacket),                                                    //          .endofpacket
		.in_ready             (rsp_demux_src2_ready),                                                          //          .ready
		.in_data              (rsp_demux_src2_data),                                                           //          .data
		.out_endofpacket      (mem_if_ddr3_emif_0_avl_to_master_0_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (mem_if_ddr3_emif_0_avl_to_master_0_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (mem_if_ddr3_emif_0_avl_to_master_0_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (mem_if_ddr3_emif_0_avl_to_master_0_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (mem_if_ddr3_emif_0_avl_to_master_0_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (mem_if_ddr3_emif_0_avl_to_master_0_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (59),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (64),
		.IN_PKT_BURSTWRAP_L            (60),
		.IN_PKT_BURST_SIZE_H           (67),
		.IN_PKT_BURST_SIZE_L           (65),
		.IN_PKT_RESPONSE_STATUS_H      (89),
		.IN_PKT_RESPONSE_STATUS_L      (88),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (69),
		.IN_PKT_BURST_TYPE_L           (68),
		.IN_PKT_ORI_BURST_SIZE_L       (90),
		.IN_PKT_ORI_BURST_SIZE_H       (92),
		.IN_ST_DATA_W                  (93),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (86),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (116),
		.OUT_PKT_RESPONSE_STATUS_L     (115),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (117),
		.OUT_PKT_ORI_BURST_SIZE_H      (119),
		.OUT_ST_DATA_W                 (120),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) onchip_memory2_0_s1_to_mm_master_bfm_0_m0_rsp_width_adapter (
		.clk                  (mem_if_ddr3_emif_0_afi_clk_clk),                                                //       clk.clk
		.reset                (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (rsp_demux_004_src0_valid),                                                      //      sink.valid
		.in_channel           (rsp_demux_004_src0_channel),                                                    //          .channel
		.in_startofpacket     (rsp_demux_004_src0_startofpacket),                                              //          .startofpacket
		.in_endofpacket       (rsp_demux_004_src0_endofpacket),                                                //          .endofpacket
		.in_ready             (rsp_demux_004_src0_ready),                                                      //          .ready
		.in_data              (rsp_demux_004_src0_data),                                                       //          .data
		.out_endofpacket      (onchip_memory2_0_s1_to_mm_master_bfm_0_m0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (onchip_memory2_0_s1_to_mm_master_bfm_0_m0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (onchip_memory2_0_s1_to_mm_master_bfm_0_m0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (onchip_memory2_0_s1_to_mm_master_bfm_0_m0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (onchip_memory2_0_s1_to_mm_master_bfm_0_m0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (onchip_memory2_0_s1_to_mm_master_bfm_0_m0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (59),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (64),
		.IN_PKT_BURSTWRAP_L            (60),
		.IN_PKT_BURST_SIZE_H           (67),
		.IN_PKT_BURST_SIZE_L           (65),
		.IN_PKT_RESPONSE_STATUS_H      (89),
		.IN_PKT_RESPONSE_STATUS_L      (88),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (69),
		.IN_PKT_BURST_TYPE_L           (68),
		.IN_PKT_ORI_BURST_SIZE_L       (90),
		.IN_PKT_ORI_BURST_SIZE_H       (92),
		.IN_ST_DATA_W                  (93),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (86),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (116),
		.OUT_PKT_RESPONSE_STATUS_L     (115),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (117),
		.OUT_PKT_ORI_BURST_SIZE_H      (119),
		.OUT_ST_DATA_W                 (120),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) onchip_memory2_0_s1_to_mm_bridge_0_m0_rsp_width_adapter (
		.clk                  (mem_if_ddr3_emif_0_afi_clk_clk),                                            //       clk.clk
		.reset                (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_valid             (rsp_demux_004_src1_valid),                                                  //      sink.valid
		.in_channel           (rsp_demux_004_src1_channel),                                                //          .channel
		.in_startofpacket     (rsp_demux_004_src1_startofpacket),                                          //          .startofpacket
		.in_endofpacket       (rsp_demux_004_src1_endofpacket),                                            //          .endofpacket
		.in_ready             (rsp_demux_004_src1_ready),                                                  //          .ready
		.in_data              (rsp_demux_004_src1_data),                                                   //          .data
		.out_endofpacket      (onchip_memory2_0_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (onchip_memory2_0_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (onchip_memory2_0_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (onchip_memory2_0_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (onchip_memory2_0_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (onchip_memory2_0_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (59),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (64),
		.IN_PKT_BURSTWRAP_L            (60),
		.IN_PKT_BURST_SIZE_H           (67),
		.IN_PKT_BURST_SIZE_L           (65),
		.IN_PKT_RESPONSE_STATUS_H      (89),
		.IN_PKT_RESPONSE_STATUS_L      (88),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (69),
		.IN_PKT_BURST_TYPE_L           (68),
		.IN_PKT_ORI_BURST_SIZE_L       (90),
		.IN_PKT_ORI_BURST_SIZE_H       (92),
		.IN_ST_DATA_W                  (93),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (86),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (116),
		.OUT_PKT_RESPONSE_STATUS_L     (115),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (117),
		.OUT_PKT_ORI_BURST_SIZE_H      (119),
		.OUT_ST_DATA_W                 (120),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) onchip_memory2_0_s1_to_master_0_master_rsp_width_adapter (
		.clk                  (mem_if_ddr3_emif_0_afi_clk_clk),                                             //       clk.clk
		.reset                (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_valid             (rsp_demux_004_src2_valid),                                                   //      sink.valid
		.in_channel           (rsp_demux_004_src2_channel),                                                 //          .channel
		.in_startofpacket     (rsp_demux_004_src2_startofpacket),                                           //          .startofpacket
		.in_endofpacket       (rsp_demux_004_src2_endofpacket),                                             //          .endofpacket
		.in_ready             (rsp_demux_004_src2_ready),                                                   //          .ready
		.in_data              (rsp_demux_004_src2_data),                                                    //          .data
		.out_endofpacket      (onchip_memory2_0_s1_to_master_0_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (onchip_memory2_0_s1_to_master_0_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (onchip_memory2_0_s1_to_master_0_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (onchip_memory2_0_s1_to_master_0_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (onchip_memory2_0_s1_to_master_0_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (onchip_memory2_0_s1_to_master_0_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (59),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (64),
		.IN_PKT_BURSTWRAP_L            (60),
		.IN_PKT_BURST_SIZE_H           (67),
		.IN_PKT_BURST_SIZE_L           (65),
		.IN_PKT_RESPONSE_STATUS_H      (89),
		.IN_PKT_RESPONSE_STATUS_L      (88),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (69),
		.IN_PKT_BURST_TYPE_L           (68),
		.IN_PKT_ORI_BURST_SIZE_L       (90),
		.IN_PKT_ORI_BURST_SIZE_H       (92),
		.IN_ST_DATA_W                  (93),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (122),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (130),
		.OUT_PKT_BURST_SIZE_L          (128),
		.OUT_PKT_RESPONSE_STATUS_H     (152),
		.OUT_PKT_RESPONSE_STATUS_L     (151),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (132),
		.OUT_PKT_BURST_TYPE_L          (131),
		.OUT_PKT_ORI_BURST_SIZE_L      (153),
		.OUT_PKT_ORI_BURST_SIZE_H      (155),
		.OUT_ST_DATA_W                 (156),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) onchip_memory2_0_s1_to_dma_0_read_master_rsp_width_adapter (
		.clk                  (mem_if_ddr3_emif_0_afi_clk_clk),                                               //       clk.clk
		.reset                (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_valid             (rsp_demux_004_src3_valid),                                                     //      sink.valid
		.in_channel           (rsp_demux_004_src3_channel),                                                   //          .channel
		.in_startofpacket     (rsp_demux_004_src3_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (rsp_demux_004_src3_endofpacket),                                               //          .endofpacket
		.in_ready             (rsp_demux_004_src3_ready),                                                     //          .ready
		.in_data              (rsp_demux_004_src3_data),                                                      //          .data
		.out_endofpacket      (onchip_memory2_0_s1_to_dma_0_read_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (onchip_memory2_0_s1_to_dma_0_read_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (onchip_memory2_0_s1_to_dma_0_read_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (onchip_memory2_0_s1_to_dma_0_read_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (onchip_memory2_0_s1_to_dma_0_read_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (onchip_memory2_0_s1_to_dma_0_read_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                        // (terminated)
	);

	ddr_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (66),
		.inUsePackets    (0),
		.inDataWidth     (66),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (66),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (mem_if_ddr3_emif_0_afi_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (mem_if_ddr3_emif_0_avl_translator_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (mem_if_ddr3_emif_0_avl_agent_rdata_fifo_out_data),                    //     in_0.data
		.in_0_valid     (mem_if_ddr3_emif_0_avl_agent_rdata_fifo_out_valid),                   //         .valid
		.in_0_ready     (mem_if_ddr3_emif_0_avl_agent_rdata_fifo_out_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                       //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                       //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                        //         .error
	);

	ddr_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (mem_if_ddr3_emif_0_afi_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (dma_0_control_port_slave_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (dma_0_control_port_slave_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (dma_0_control_port_slave_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                      //         .error
	);

	ddr_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (mem_if_ddr3_emif_0_afi_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (sysid_qsys_0_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                      //         .error
	);

	ddr_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (mem_if_ddr3_emif_0_afi_clk_clk),          // in_clk_0.clk
		.in_rst_0_reset (pio_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pio_0_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (pio_0_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (pio_0_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)        //         .error
	);

	ddr_mm_interconnect_0_avalon_st_adapter_004 #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (mem_if_ddr3_emif_0_afi_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (mm_master_bfm_0_clk_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_memory2_0_s1_agent_rdata_fifo_src_data),         //     in_0.data
		.in_0_valid     (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),        //         .valid
		.in_0_ready     (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                      //         .error
	);

endmodule
